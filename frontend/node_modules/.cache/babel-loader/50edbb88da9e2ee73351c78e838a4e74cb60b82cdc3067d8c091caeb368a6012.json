{"ast":null,"code":"// axios use to perform HTTP requests(APIs), that works in both Browser(front-end) and Node. js(backend) platforms.\n//creating axios instance for easy usage for every needed page\nimport axios from \"axios\";\nimport { api } from \"../urlConfig\";\nimport store from \"../store\";\nimport { authConstants } from \"../actions/constants\";\nconst token = window.localStorage.getItem(\"token\");\n\n//instancing common data such as baseURL (it is common for all apis) for easy use\nconst axiosInstance = axios.create({\n  baseURL: api,\n  headers: {\n    Authorization: token ? `Bearer ${token}` : \"\"\n  }\n});\n\n//intercepting the req or res before they are handled by then or catch\n//if an error happen when sending a request handling it\naxiosInstance.interceptors.request.use(req => {\n  //assigning the new token after login again after logout\n  const {\n    auth\n  } = store.getState();\n  if (auth.token) {\n    req.headers.Authorization = `Bearer ${auth.token}`;\n  }\n  return req;\n});\n\n//if an error happen when receiving a respond handling it\naxiosInstance.interceptors.response.use(res => {\n  return res;\n}, error => {\n  console.log(error.response);\n  const status = error.response ? error.response.status : 500;\n  if (status && status === 500) {\n    //if error = 500 mean users token is expired. Then we have to logout the user\n    localStorage.clear();\n    store.dispatch({\n      type: authConstants.LOGOUT_SUCCESS\n    });\n  }\n  return Promise.reject(error);\n});\nexport default axiosInstance;\n\n/* import axios from 'axios';\r\nimport { api } from '../urlConfig';\r\nimport store from '../store';\r\nimport { authConstants } from '../actions/constants';\r\n\r\nconst token = window.localStorage.getItem('token');\r\n\r\nconst axiosIntance = axios.create({\r\n    baseURL: api,\r\n    headers: {\r\n       'Authorization': token ? `Bearer ${token}` : ''\r\n    }\r\n});\r\n\r\naxiosIntance.interceptors.request.use((req) => {\r\n    const { auth } = store.getState();\r\n    if(auth.token){\r\n        req.headers.Authorization = `Bearer ${auth.token}`;\r\n    }\r\n    return req;\r\n})\r\n\r\naxiosIntance.interceptors.response.use((res) => {\r\n    return res;\r\n}, (error) => {\r\n    console.log(error.response);\r\n    const status = error.response ? error.response.status : 500;\r\n    if(status && status === 500){\r\n        localStorage.clear();\r\n        store.dispatch({ type: authConstants.LOGOUT_SUCCESS });\r\n    }\r\n    return Promise.reject(error);\r\n})\r\n\r\nexport default axiosIntance; */","map":{"version":3,"names":["axios","api","store","authConstants","token","window","localStorage","getItem","axiosInstance","create","baseURL","headers","Authorization","interceptors","request","use","req","auth","getState","response","res","error","console","log","status","clear","dispatch","type","LOGOUT_SUCCESS","Promise","reject"],"sources":["C:/Users/User/Desktop/Final/frontend/src/helpers/axios.js"],"sourcesContent":["// axios use to perform HTTP requests(APIs), that works in both Browser(front-end) and Node. js(backend) platforms.\r\n//creating axios instance for easy usage for every needed page\r\nimport axios from \"axios\";\r\nimport { api } from \"../urlConfig\";\r\nimport store from \"../store\";\r\nimport { authConstants } from \"../actions/constants\";\r\n\r\nconst token = window.localStorage.getItem(\"token\");\r\n\r\n//instancing common data such as baseURL (it is common for all apis) for easy use\r\nconst axiosInstance = axios.create({\r\n  baseURL: api,\r\n  headers: { Authorization: token ? `Bearer ${token}` : \"\" },\r\n});\r\n\r\n//intercepting the req or res before they are handled by then or catch\r\n//if an error happen when sending a request handling it\r\naxiosInstance.interceptors.request.use((req) => {\r\n  //assigning the new token after login again after logout\r\n  const { auth } = store.getState();\r\n  if (auth.token) {\r\n    req.headers.Authorization = `Bearer ${auth.token}`;\r\n  }\r\n  return req;\r\n});\r\n\r\n//if an error happen when receiving a respond handling it\r\naxiosInstance.interceptors.response.use(\r\n  (res) => {\r\n    return res;\r\n  },\r\n  (error) => {\r\n    console.log(error.response);\r\n    const status = error.response ? error.response.status : 500;\r\n\r\n    if (status && status === 500) {\r\n      //if error = 500 mean users token is expired. Then we have to logout the user\r\n      localStorage.clear();\r\n      store.dispatch({ type: authConstants.LOGOUT_SUCCESS });\r\n    }\r\n\r\n    return Promise.reject(error);\r\n  }\r\n);\r\n\r\nexport default axiosInstance;\r\n\r\n\r\n/* import axios from 'axios';\r\nimport { api } from '../urlConfig';\r\nimport store from '../store';\r\nimport { authConstants } from '../actions/constants';\r\n\r\nconst token = window.localStorage.getItem('token');\r\n\r\nconst axiosIntance = axios.create({\r\n    baseURL: api,\r\n    headers: {\r\n       'Authorization': token ? `Bearer ${token}` : ''\r\n    }\r\n});\r\n\r\naxiosIntance.interceptors.request.use((req) => {\r\n    const { auth } = store.getState();\r\n    if(auth.token){\r\n        req.headers.Authorization = `Bearer ${auth.token}`;\r\n    }\r\n    return req;\r\n})\r\n\r\naxiosIntance.interceptors.response.use((res) => {\r\n    return res;\r\n}, (error) => {\r\n    console.log(error.response);\r\n    const status = error.response ? error.response.status : 500;\r\n    if(status && status === 500){\r\n        localStorage.clear();\r\n        store.dispatch({ type: authConstants.LOGOUT_SUCCESS });\r\n    }\r\n    return Promise.reject(error);\r\n})\r\n\r\nexport default axiosIntance; */"],"mappings":"AAAA;AACA;AACA,OAAOA,KAAK,MAAM,OAAO;AACzB,SAASC,GAAG,QAAQ,cAAc;AAClC,OAAOC,KAAK,MAAM,UAAU;AAC5B,SAASC,aAAa,QAAQ,sBAAsB;AAEpD,MAAMC,KAAK,GAAGC,MAAM,CAACC,YAAY,CAACC,OAAO,CAAC,OAAO,CAAC;;AAElD;AACA,MAAMC,aAAa,GAAGR,KAAK,CAACS,MAAM,CAAC;EACjCC,OAAO,EAAET,GAAG;EACZU,OAAO,EAAE;IAAEC,aAAa,EAAER,KAAK,GAAI,UAASA,KAAM,EAAC,GAAG;EAAG;AAC3D,CAAC,CAAC;;AAEF;AACA;AACAI,aAAa,CAACK,YAAY,CAACC,OAAO,CAACC,GAAG,CAAEC,GAAG,IAAK;EAC9C;EACA,MAAM;IAAEC;EAAK,CAAC,GAAGf,KAAK,CAACgB,QAAQ,CAAC,CAAC;EACjC,IAAID,IAAI,CAACb,KAAK,EAAE;IACdY,GAAG,CAACL,OAAO,CAACC,aAAa,GAAI,UAASK,IAAI,CAACb,KAAM,EAAC;EACpD;EACA,OAAOY,GAAG;AACZ,CAAC,CAAC;;AAEF;AACAR,aAAa,CAACK,YAAY,CAACM,QAAQ,CAACJ,GAAG,CACpCK,GAAG,IAAK;EACP,OAAOA,GAAG;AACZ,CAAC,EACAC,KAAK,IAAK;EACTC,OAAO,CAACC,GAAG,CAACF,KAAK,CAACF,QAAQ,CAAC;EAC3B,MAAMK,MAAM,GAAGH,KAAK,CAACF,QAAQ,GAAGE,KAAK,CAACF,QAAQ,CAACK,MAAM,GAAG,GAAG;EAE3D,IAAIA,MAAM,IAAIA,MAAM,KAAK,GAAG,EAAE;IAC5B;IACAlB,YAAY,CAACmB,KAAK,CAAC,CAAC;IACpBvB,KAAK,CAACwB,QAAQ,CAAC;MAAEC,IAAI,EAAExB,aAAa,CAACyB;IAAe,CAAC,CAAC;EACxD;EAEA,OAAOC,OAAO,CAACC,MAAM,CAACT,KAAK,CAAC;AAC9B,CACF,CAAC;AAED,eAAeb,aAAa;;AAG5B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA"},"metadata":{},"sourceType":"module","externalDependencies":[]}