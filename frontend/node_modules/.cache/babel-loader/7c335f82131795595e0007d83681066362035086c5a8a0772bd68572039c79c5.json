{"ast":null,"code":"import { categoryConstants } from \"../actions/constants\";\nconst initState = {\n  categories: [],\n  loading: false,\n  error: null\n};\nconst buildNewCategories = (categories, category) => {\n  return [...categories, {\n    _id: category._id,\n    name: category.name,\n    slug: category.slug,\n    description: category.description\n  }];\n};\nexport default ((state = initState, action) => {\n  switch (action.type) {\n    case categoryConstants.GET_ALL_CATEGORIES_SUCCESS:\n      state = {\n        ...state,\n        categories: action.payload.categories,\n        loading: false\n      };\n      break;\n    case categoryConstants.ADD_NEW_CATEGORY_REQUEST:\n      state = {\n        ...state,\n        loading: true\n      };\n      break;\n    case categoryConstants.ADD_NEW_CATEGORY_SUCCESS:\n      const category = action.payload.category;\n      const updatedCategories = buildNewCategories(state.categories, category);\n      console.log(\"updatedCategories\", updatedCategories);\n      state = {\n        ...state,\n        categories: updatedCategories,\n        loading: false\n      };\n      break;\n    case categoryConstants.ADD_NEW_CATEGORY_FAILURE:\n      state = {\n        ...initState,\n        loading: false,\n        error: action.payload.error\n      };\n      break;\n    case categoryConstants.UPDATE_CATEGORY_REQUEST:\n      state = {\n        ...state,\n        loading: true\n      };\n      break;\n    case categoryConstants.UPDATE_CATEGORY_SUCCESS:\n      state = {\n        ...state,\n        loading: false\n      };\n      break;\n    case categoryConstants.UPDATE_CATEGORY_FAILURE:\n      state = {\n        ...state,\n        error: action.payload.error,\n        loading: false\n      };\n      break;\n    case categoryConstants.DELETE_CATEGORY_REQUEST:\n      state = {\n        ...state,\n        loading: true\n      };\n      break;\n    case categoryConstants.DELETE_CATEGORY_SUCCESS:\n      state = {\n        ...state,\n        loading: false\n      };\n      break;\n    case categoryConstants.DELETE_CATEGORY_FAILURE:\n      state = {\n        ...state,\n        error: action.payload.error,\n        loading: false\n      };\n      break;\n  }\n  return state;\n});\n\n/* import { categoryConstansts } from \"../actions/constants\";\r\n\r\nconst initState = {\r\n    categories: [],\r\n    loading: false,\r\n    error: null\r\n};\r\n\r\n\r\nconst buildNewCategories = (parentId, categories, category) => {\r\n    let myCategories = [];\r\n\r\n    if(parentId === undefined){\r\n        return [\r\n            ...categories,\r\n            {\r\n                _id: category._id,\r\n                name: category.name,\r\n                slug: category.slug,\r\n                type: category.type,\r\n                children: []\r\n            }\r\n        ];\r\n    }\r\n   \r\n    for(let cat of categories){\r\n\r\n        if(cat._id === parentId){\r\n            const newCategory = {\r\n                _id: category._id,\r\n                name: category.name,\r\n                slug: category.slug,\r\n                parentId: category.parentId,\r\n                type: category.type,\r\n                children: []\r\n            };\r\n            myCategories.push({\r\n                ...cat,\r\n                children: cat.children.length > 0 ? [...cat.children, newCategory] : [newCategory]\r\n            })\r\n        }else{\r\n            myCategories.push({\r\n                ...cat,\r\n                children: cat.children ? buildNewCategories(parentId, cat.children, category) : []\r\n            });\r\n        }\r\n\r\n        \r\n    }\r\n\r\n\r\n    return myCategories;\r\n}\r\n\r\n\r\nconst categoryReducer = (state = initState, action) => {\r\n    switch(action.type){\r\n        case categoryConstansts.GET_ALL_CATEGORIES_SUCCESS:\r\n            return{\r\n                ...state,\r\n                categories: action.payload.categories\r\n            }\r\n           \r\n        case categoryConstansts.ADD_NEW_CATEGORY_REQUEST:\r\n           return {\r\n                ...state,\r\n                loading: true\r\n            }\r\n            \r\n        case categoryConstansts.ADD_NEW_CATEGORY_SUCCESS:\r\n           const category = action.payload.category;\r\n           const updatedCategories = buildNewCategories(category.parentId, state.categories, category);\r\n           console.log('updated categoires', updatedCategories);\r\n            \r\n            return {\r\n                ...state,\r\n                categories: updatedCategories,\r\n                loading: false,\r\n            }\r\n           \r\n        case categoryConstansts.ADD_NEW_CATEGORY_FAILURE:\r\n           return {\r\n                ...initState,\r\n                loading: false,\r\n                //error: action.payload.error\r\n            }\r\n            \r\n        case categoryConstansts.UPDATE_CATEGORIES_REQUEST:\r\n          return {\r\n                ...state,\r\n                loading: true\r\n            }\r\n           \r\n        case categoryConstansts.UPDATE_CATEGORIES_SUCCESS:\r\n            return {\r\n                ...state,\r\n                loading: false\r\n            }\r\n            \r\n        case categoryConstansts.UPDATE_CATEGORIES_FAILURE:\r\n           return{\r\n                ...state,\r\n                error: action.payload.error,\r\n                loading: false\r\n            }\r\n            \r\n        case categoryConstansts.DELETE_CATEGORIES_REQUEST:\r\n           return{\r\n                ...state,\r\n                loading: true\r\n            }\r\n            \r\n        case categoryConstansts.DELETE_CATEGORIES_SUCCESS:\r\n            return {\r\n                ...state,\r\n                loading: false\r\n            }\r\n            \r\n        case categoryConstansts.DELETE_CATEGORIES_FAILURE:\r\n            return {\r\n                ...state,\r\n                loading: false,\r\n                error: action.payload.error\r\n            };\r\n            \r\n    \r\n    default:\r\n    return state;\r\n}\r\n};\r\nexport default categoryReducer; */","map":{"version":3,"names":["categoryConstants","initState","categories","loading","error","buildNewCategories","category","_id","name","slug","description","state","action","type","GET_ALL_CATEGORIES_SUCCESS","payload","ADD_NEW_CATEGORY_REQUEST","ADD_NEW_CATEGORY_SUCCESS","updatedCategories","console","log","ADD_NEW_CATEGORY_FAILURE","UPDATE_CATEGORY_REQUEST","UPDATE_CATEGORY_SUCCESS","UPDATE_CATEGORY_FAILURE","DELETE_CATEGORY_REQUEST","DELETE_CATEGORY_SUCCESS","DELETE_CATEGORY_FAILURE"],"sources":["C:/Users/User/Desktop/Final/frontend/src/reducers/category.reducer.js"],"sourcesContent":["import { categoryConstants } from \"../actions/constants\";\r\n\r\nconst initState = {\r\n  categories: [],\r\n  loading: false,\r\n  error: null,\r\n};\r\n\r\nconst buildNewCategories = (categories, category) => {\r\n  return [\r\n    ...categories,\r\n    {\r\n      _id: category._id,\r\n      name: category.name,\r\n      slug: category.slug,\r\n      description: category.description,\r\n    },\r\n  ];\r\n};\r\n\r\nexport default (state = initState, action) => {\r\n  switch (action.type) {\r\n    case categoryConstants.GET_ALL_CATEGORIES_SUCCESS:\r\n      state = {\r\n        ...state,\r\n        categories: action.payload.categories,\r\n        loading: false,\r\n      };\r\n      break;\r\n    case categoryConstants.ADD_NEW_CATEGORY_REQUEST:\r\n      state = {\r\n        ...state,\r\n        loading: true,\r\n      };\r\n      break;\r\n    case categoryConstants.ADD_NEW_CATEGORY_SUCCESS:\r\n      const category = action.payload.category;\r\n      const updatedCategories = buildNewCategories(state.categories, category);\r\n      console.log(\"updatedCategories\", updatedCategories);\r\n\r\n      state = {\r\n        ...state,\r\n        categories: updatedCategories,\r\n        loading: false,\r\n      };\r\n      break;\r\n    case categoryConstants.ADD_NEW_CATEGORY_FAILURE:\r\n      state = {\r\n        ...initState,\r\n        loading: false,\r\n        error: action.payload.error,\r\n      };\r\n      break;\r\n    case categoryConstants.UPDATE_CATEGORY_REQUEST:\r\n      state = { ...state, loading: true };\r\n      break;\r\n    case categoryConstants.UPDATE_CATEGORY_SUCCESS:\r\n      state = { ...state, loading: false };\r\n      break;\r\n    case categoryConstants.UPDATE_CATEGORY_FAILURE:\r\n      state = { ...state, error: action.payload.error, loading: false };\r\n      break;\r\n    case categoryConstants.DELETE_CATEGORY_REQUEST:\r\n      state = { ...state, loading: true };\r\n      break;\r\n    case categoryConstants.DELETE_CATEGORY_SUCCESS:\r\n      state = { ...state, loading: false };\r\n      break;\r\n    case categoryConstants.DELETE_CATEGORY_FAILURE:\r\n      state = { ...state, error: action.payload.error, loading: false };\r\n      break;\r\n  }\r\n  return state;\r\n};\r\n\r\n/* import { categoryConstansts } from \"../actions/constants\";\r\n\r\nconst initState = {\r\n    categories: [],\r\n    loading: false,\r\n    error: null\r\n};\r\n\r\n\r\nconst buildNewCategories = (parentId, categories, category) => {\r\n    let myCategories = [];\r\n\r\n    if(parentId === undefined){\r\n        return [\r\n            ...categories,\r\n            {\r\n                _id: category._id,\r\n                name: category.name,\r\n                slug: category.slug,\r\n                type: category.type,\r\n                children: []\r\n            }\r\n        ];\r\n    }\r\n   \r\n    for(let cat of categories){\r\n\r\n        if(cat._id === parentId){\r\n            const newCategory = {\r\n                _id: category._id,\r\n                name: category.name,\r\n                slug: category.slug,\r\n                parentId: category.parentId,\r\n                type: category.type,\r\n                children: []\r\n            };\r\n            myCategories.push({\r\n                ...cat,\r\n                children: cat.children.length > 0 ? [...cat.children, newCategory] : [newCategory]\r\n            })\r\n        }else{\r\n            myCategories.push({\r\n                ...cat,\r\n                children: cat.children ? buildNewCategories(parentId, cat.children, category) : []\r\n            });\r\n        }\r\n\r\n        \r\n    }\r\n\r\n\r\n    return myCategories;\r\n}\r\n\r\n\r\nconst categoryReducer = (state = initState, action) => {\r\n    switch(action.type){\r\n        case categoryConstansts.GET_ALL_CATEGORIES_SUCCESS:\r\n            return{\r\n                ...state,\r\n                categories: action.payload.categories\r\n            }\r\n           \r\n        case categoryConstansts.ADD_NEW_CATEGORY_REQUEST:\r\n           return {\r\n                ...state,\r\n                loading: true\r\n            }\r\n            \r\n        case categoryConstansts.ADD_NEW_CATEGORY_SUCCESS:\r\n           const category = action.payload.category;\r\n           const updatedCategories = buildNewCategories(category.parentId, state.categories, category);\r\n           console.log('updated categoires', updatedCategories);\r\n            \r\n            return {\r\n                ...state,\r\n                categories: updatedCategories,\r\n                loading: false,\r\n            }\r\n           \r\n        case categoryConstansts.ADD_NEW_CATEGORY_FAILURE:\r\n           return {\r\n                ...initState,\r\n                loading: false,\r\n                //error: action.payload.error\r\n            }\r\n            \r\n        case categoryConstansts.UPDATE_CATEGORIES_REQUEST:\r\n          return {\r\n                ...state,\r\n                loading: true\r\n            }\r\n           \r\n        case categoryConstansts.UPDATE_CATEGORIES_SUCCESS:\r\n            return {\r\n                ...state,\r\n                loading: false\r\n            }\r\n            \r\n        case categoryConstansts.UPDATE_CATEGORIES_FAILURE:\r\n           return{\r\n                ...state,\r\n                error: action.payload.error,\r\n                loading: false\r\n            }\r\n            \r\n        case categoryConstansts.DELETE_CATEGORIES_REQUEST:\r\n           return{\r\n                ...state,\r\n                loading: true\r\n            }\r\n            \r\n        case categoryConstansts.DELETE_CATEGORIES_SUCCESS:\r\n            return {\r\n                ...state,\r\n                loading: false\r\n            }\r\n            \r\n        case categoryConstansts.DELETE_CATEGORIES_FAILURE:\r\n            return {\r\n                ...state,\r\n                loading: false,\r\n                error: action.payload.error\r\n            };\r\n            \r\n    \r\n    default:\r\n    return state;\r\n}\r\n};\r\nexport default categoryReducer; */"],"mappings":"AAAA,SAASA,iBAAiB,QAAQ,sBAAsB;AAExD,MAAMC,SAAS,GAAG;EAChBC,UAAU,EAAE,EAAE;EACdC,OAAO,EAAE,KAAK;EACdC,KAAK,EAAE;AACT,CAAC;AAED,MAAMC,kBAAkB,GAAGA,CAACH,UAAU,EAAEI,QAAQ,KAAK;EACnD,OAAO,CACL,GAAGJ,UAAU,EACb;IACEK,GAAG,EAAED,QAAQ,CAACC,GAAG;IACjBC,IAAI,EAAEF,QAAQ,CAACE,IAAI;IACnBC,IAAI,EAAEH,QAAQ,CAACG,IAAI;IACnBC,WAAW,EAAEJ,QAAQ,CAACI;EACxB,CAAC,CACF;AACH,CAAC;AAED,gBAAe,CAACC,KAAK,GAAGV,SAAS,EAAEW,MAAM,KAAK;EAC5C,QAAQA,MAAM,CAACC,IAAI;IACjB,KAAKb,iBAAiB,CAACc,0BAA0B;MAC/CH,KAAK,GAAG;QACN,GAAGA,KAAK;QACRT,UAAU,EAAEU,MAAM,CAACG,OAAO,CAACb,UAAU;QACrCC,OAAO,EAAE;MACX,CAAC;MACD;IACF,KAAKH,iBAAiB,CAACgB,wBAAwB;MAC7CL,KAAK,GAAG;QACN,GAAGA,KAAK;QACRR,OAAO,EAAE;MACX,CAAC;MACD;IACF,KAAKH,iBAAiB,CAACiB,wBAAwB;MAC7C,MAAMX,QAAQ,GAAGM,MAAM,CAACG,OAAO,CAACT,QAAQ;MACxC,MAAMY,iBAAiB,GAAGb,kBAAkB,CAACM,KAAK,CAACT,UAAU,EAAEI,QAAQ,CAAC;MACxEa,OAAO,CAACC,GAAG,CAAC,mBAAmB,EAAEF,iBAAiB,CAAC;MAEnDP,KAAK,GAAG;QACN,GAAGA,KAAK;QACRT,UAAU,EAAEgB,iBAAiB;QAC7Bf,OAAO,EAAE;MACX,CAAC;MACD;IACF,KAAKH,iBAAiB,CAACqB,wBAAwB;MAC7CV,KAAK,GAAG;QACN,GAAGV,SAAS;QACZE,OAAO,EAAE,KAAK;QACdC,KAAK,EAAEQ,MAAM,CAACG,OAAO,CAACX;MACxB,CAAC;MACD;IACF,KAAKJ,iBAAiB,CAACsB,uBAAuB;MAC5CX,KAAK,GAAG;QAAE,GAAGA,KAAK;QAAER,OAAO,EAAE;MAAK,CAAC;MACnC;IACF,KAAKH,iBAAiB,CAACuB,uBAAuB;MAC5CZ,KAAK,GAAG;QAAE,GAAGA,KAAK;QAAER,OAAO,EAAE;MAAM,CAAC;MACpC;IACF,KAAKH,iBAAiB,CAACwB,uBAAuB;MAC5Cb,KAAK,GAAG;QAAE,GAAGA,KAAK;QAAEP,KAAK,EAAEQ,MAAM,CAACG,OAAO,CAACX,KAAK;QAAED,OAAO,EAAE;MAAM,CAAC;MACjE;IACF,KAAKH,iBAAiB,CAACyB,uBAAuB;MAC5Cd,KAAK,GAAG;QAAE,GAAGA,KAAK;QAAER,OAAO,EAAE;MAAK,CAAC;MACnC;IACF,KAAKH,iBAAiB,CAAC0B,uBAAuB;MAC5Cf,KAAK,GAAG;QAAE,GAAGA,KAAK;QAAER,OAAO,EAAE;MAAM,CAAC;MACpC;IACF,KAAKH,iBAAiB,CAAC2B,uBAAuB;MAC5ChB,KAAK,GAAG;QAAE,GAAGA,KAAK;QAAEP,KAAK,EAAEQ,MAAM,CAACG,OAAO,CAACX,KAAK;QAAED,OAAO,EAAE;MAAM,CAAC;MACjE;EACJ;EACA,OAAOQ,KAAK;AACd},"metadata":{},"sourceType":"module","externalDependencies":[]}