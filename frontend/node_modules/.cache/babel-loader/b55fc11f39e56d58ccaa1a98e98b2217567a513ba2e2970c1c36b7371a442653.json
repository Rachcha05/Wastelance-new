{"ast":null,"code":"import axios from \"../helpers/axios\";\nimport { inventoryConstants } from \"./constants\";\nimport { toast } from \"react-toastify\";\n\n//get inventory from database\nexport const getInventory = () => {\n  return async dispatch => {\n    dispatch({\n      type: inventoryConstants.GET_INVENTORY_REQUEST\n    });\n    const res = await axios.get(\"/inventory\");\n    console.log(res);\n    if (res.status === 200) {\n      const {\n        inventory\n      } = res.data;\n      dispatch({\n        type: inventoryConstants.GET_INVENTORY_SUCCESS,\n        payload: {\n          inventory: inventory\n        }\n      });\n    } else {\n      dispatch({\n        type: inventoryConstants.GET_INVENTORY_FAILURE,\n        payload: {\n          error: res.data.error\n        }\n      });\n    }\n  };\n};\n\n//action to add inventory to database\nexport const addInventory = form => {\n  return async dispatch => {\n    dispatch({\n      type: inventoryConstants.ADD_INVENTORY_REQUEST\n    });\n    try {\n      const res = await axios.post(\"/inventory/add\", form);\n      if (res.status === 201) {\n        dispatch({\n          type: inventoryConstants.ADD_INVENTORY_SUCCESS,\n          payload: {\n            inventory: res.data.inventory\n          }\n        });\n        toast.success(res.data.msg, {\n          position: \"top-right\",\n          autoClose: 5000,\n          hideProgressBar: false,\n          closeOnClick: true,\n          pauseOnHover: true,\n          draggable: true,\n          progress: undefined\n        });\n      } else {\n        dispatch({\n          type: inventoryConstants.ADD_INVENTORY_FAILURE,\n          payload: res.data.error\n        });\n        toast.error(res.data.error, {\n          position: \"top-right\",\n          autoClose: 5000,\n          hideProgressBar: false,\n          closeOnClick: true,\n          pauseOnHover: true,\n          draggable: true,\n          progress: undefined\n        });\n      }\n      console.log(res);\n    } catch (error) {\n      console.log(error.reponse);\n    }\n  };\n};\n\n//action to delete inventory from database\nexport const deleteInventory = id => {\n  return async dispatch => {\n    dispatch({\n      type: inventoryConstants.DELETE_INVENTORY_REQUEST\n    });\n    const res = await axios.delete(\"/inventory/delete/\" + id);\n    if (res.status === 200) {\n      dispatch(getInventory());\n      dispatch({\n        type: inventoryConstants.DELETE_INVENTORY_SUCCESS\n      });\n      toast.success(res.data.msg, {\n        position: \"top-right\",\n        autoClose: 5000,\n        hideProgressBar: false,\n        closeOnClick: true,\n        pauseOnHover: true,\n        draggable: true,\n        progress: undefined\n      });\n    } else {\n      const {\n        error\n      } = res.data;\n      dispatch({\n        type: inventoryConstants.DELETE_INVENTORY_FAILURE,\n        payload: {\n          error\n        }\n      });\n      toast.error(res.data.error, {\n        position: \"top-right\",\n        autoClose: 5000,\n        hideProgressBar: false,\n        closeOnClick: true,\n        pauseOnHover: true,\n        draggable: true,\n        progress: undefined\n      });\n    }\n  };\n};","map":{"version":3,"names":["axios","inventoryConstants","toast","getInventory","dispatch","type","GET_INVENTORY_REQUEST","res","get","console","log","status","inventory","data","GET_INVENTORY_SUCCESS","payload","GET_INVENTORY_FAILURE","error","addInventory","form","ADD_INVENTORY_REQUEST","post","ADD_INVENTORY_SUCCESS","success","msg","position","autoClose","hideProgressBar","closeOnClick","pauseOnHover","draggable","progress","undefined","ADD_INVENTORY_FAILURE","reponse","deleteInventory","id","DELETE_INVENTORY_REQUEST","delete","DELETE_INVENTORY_SUCCESS","DELETE_INVENTORY_FAILURE"],"sources":["C:/Users/User/Desktop/Final/frontend/src/actions/inventory.actions.js"],"sourcesContent":["import axios from \"../helpers/axios\";\r\nimport { inventoryConstants } from \"./constants\";\r\nimport { toast } from \"react-toastify\";\r\n\r\n//get inventory from database\r\nexport const getInventory = () => {\r\n  return async (dispatch) => {\r\n    dispatch({ type: inventoryConstants.GET_INVENTORY_REQUEST });\r\n\r\n    const res = await axios.get(\"/inventory\");\r\n    console.log(res);\r\n\r\n    if (res.status === 200) {\r\n      const { inventory } = res.data;\r\n\r\n      dispatch({\r\n        type: inventoryConstants.GET_INVENTORY_SUCCESS,\r\n        payload: { inventory: inventory },\r\n      });\r\n    } else {\r\n      dispatch({\r\n        type: inventoryConstants.GET_INVENTORY_FAILURE,\r\n        payload: {\r\n          error: res.data.error,\r\n        },\r\n      });\r\n    }\r\n  };\r\n};\r\n\r\n//action to add inventory to database\r\nexport const addInventory = (form) => {\r\n  return async (dispatch) => {\r\n    dispatch({ type: inventoryConstants.ADD_INVENTORY_REQUEST });\r\n\r\n    try {\r\n      const res = await axios.post(\"/inventory/add\", form);\r\n      if (res.status === 201) {\r\n        dispatch({\r\n          type: inventoryConstants.ADD_INVENTORY_SUCCESS,\r\n          payload: { inventory: res.data.inventory },\r\n        });\r\n        toast.success(res.data.msg, {\r\n          position: \"top-right\",\r\n          autoClose: 5000,\r\n          hideProgressBar: false,\r\n          closeOnClick: true,\r\n          pauseOnHover: true,\r\n          draggable: true,\r\n          progress: undefined,\r\n        });\r\n      } else {\r\n        dispatch({\r\n          type: inventoryConstants.ADD_INVENTORY_FAILURE,\r\n          payload: res.data.error,\r\n        });\r\n        toast.error(res.data.error, {\r\n          position: \"top-right\",\r\n          autoClose: 5000,\r\n          hideProgressBar: false,\r\n          closeOnClick: true,\r\n          pauseOnHover: true,\r\n          draggable: true,\r\n          progress: undefined,\r\n        });\r\n      }\r\n      console.log(res);\r\n    } catch (error) {\r\n      console.log(error.reponse);\r\n    }\r\n  };\r\n};\r\n\r\n//action to delete inventory from database\r\nexport const deleteInventory = (id) => {\r\n  return async (dispatch) => {\r\n    dispatch({ type: inventoryConstants.DELETE_INVENTORY_REQUEST });\r\n\r\n    const res = await axios.delete(\"/inventory/delete/\" + id);\r\n\r\n    if (res.status === 200) {\r\n      dispatch(getInventory());\r\n      dispatch({\r\n        type: inventoryConstants.DELETE_INVENTORY_SUCCESS,\r\n      });\r\n      toast.success(res.data.msg, {\r\n        position: \"top-right\",\r\n        autoClose: 5000,\r\n        hideProgressBar: false,\r\n        closeOnClick: true,\r\n        pauseOnHover: true,\r\n        draggable: true,\r\n        progress: undefined,\r\n      });\r\n    } else {\r\n      const { error } = res.data;\r\n      dispatch({\r\n        type: inventoryConstants.DELETE_INVENTORY_FAILURE,\r\n        payload: { error },\r\n      });\r\n\r\n      toast.error(res.data.error, {\r\n        position: \"top-right\",\r\n        autoClose: 5000,\r\n        hideProgressBar: false,\r\n        closeOnClick: true,\r\n        pauseOnHover: true,\r\n        draggable: true,\r\n        progress: undefined,\r\n      });\r\n    }\r\n  };\r\n};\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}