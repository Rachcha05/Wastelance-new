{"ast":null,"code":"'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nvar _createClass = function () {\n  function defineProperties(target, props) {\n    for (var i = 0; i < props.length; i++) {\n      var descriptor = props[i];\n      descriptor.enumerable = descriptor.enumerable || false;\n      descriptor.configurable = true;\n      if (\"value\" in descriptor) descriptor.writable = true;\n      Object.defineProperty(target, descriptor.key, descriptor);\n    }\n  }\n  return function (Constructor, protoProps, staticProps) {\n    if (protoProps) defineProperties(Constructor.prototype, protoProps);\n    if (staticProps) defineProperties(Constructor, staticProps);\n    return Constructor;\n  };\n}();\nvar _react = require('react');\nvar _react2 = _interopRequireDefault(_react);\nvar _propTypes = require('prop-types');\nvar _propTypes2 = _interopRequireDefault(_propTypes);\nvar _filter = require('./filter');\nvar _comparison = require('./comparison');\nvar _const = require('./const');\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    default: obj\n  };\n}\nfunction _defineProperty(obj, key, value) {\n  if (key in obj) {\n    Object.defineProperty(obj, key, {\n      value: value,\n      enumerable: true,\n      configurable: true,\n      writable: true\n    });\n  } else {\n    obj[key] = value;\n  }\n  return obj;\n}\nfunction _classCallCheck(instance, Constructor) {\n  if (!(instance instanceof Constructor)) {\n    throw new TypeError(\"Cannot call a class as a function\");\n  }\n}\nfunction _possibleConstructorReturn(self, call) {\n  if (!self) {\n    throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\");\n  }\n  return call && (typeof call === \"object\" || typeof call === \"function\") ? call : self;\n}\nfunction _inherits(subClass, superClass) {\n  if (typeof superClass !== \"function\" && superClass !== null) {\n    throw new TypeError(\"Super expression must either be null or a function, not \" + typeof superClass);\n  }\n  subClass.prototype = Object.create(superClass && superClass.prototype, {\n    constructor: {\n      value: subClass,\n      enumerable: false,\n      writable: true,\n      configurable: true\n    }\n  });\n  if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass;\n} /* eslint react/prop-types: 0 */\n/* eslint react/require-default-props: 0 */\n/* eslint camelcase: 0 */\n\nexports.default = function (_, isRemoteFiltering, handleFilterChange) {\n  var FilterContext = _react2.default.createContext();\n  var FilterProvider = function (_React$Component) {\n    _inherits(FilterProvider, _React$Component);\n    function FilterProvider(props) {\n      _classCallCheck(this, FilterProvider);\n      var _this = _possibleConstructorReturn(this, (FilterProvider.__proto__ || Object.getPrototypeOf(FilterProvider)).call(this, props));\n      _this.currFilters = {};\n      _this.clearFilters = {};\n      _this.onFilter = _this.onFilter.bind(_this);\n      _this.doFilter = _this.doFilter.bind(_this);\n      _this.onExternalFilter = _this.onExternalFilter.bind(_this);\n      _this.data = props.data;\n      _this.isEmitDataChange = false;\n      return _this;\n    }\n    _createClass(FilterProvider, [{\n      key: 'componentDidMount',\n      value: function componentDidMount() {\n        if (isRemoteFiltering() && Object.keys(this.currFilters).length > 0) {\n          handleFilterChange(this.currFilters);\n        }\n      }\n    }, {\n      key: 'onFilter',\n      value: function onFilter(column, filterType) {\n        var _this2 = this;\n        var initialize = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : false;\n        return function (filterVal) {\n          // watch out here if migration to context API, #334\n          var currFilters = Object.assign({}, _this2.currFilters);\n          _this2.clearFilters = {};\n          var dataField = column.dataField,\n            filter = column.filter;\n          var needClearFilters = !_.isDefined(filterVal) || filterVal === '' || filterVal.length === 0;\n          if (needClearFilters) {\n            delete currFilters[dataField];\n            _this2.clearFilters = _defineProperty({}, dataField, {\n              clear: true,\n              filterVal: filterVal\n            });\n          } else {\n            // select default comparator is EQ, others are LIKE\n            var _filter$props = filter.props,\n              _filter$props$compara = _filter$props.comparator,\n              comparator = _filter$props$compara === undefined ? filterType === _const.FILTER_TYPE.SELECT ? _comparison.EQ : _comparison.LIKE : _filter$props$compara,\n              _filter$props$caseSen = _filter$props.caseSensitive,\n              caseSensitive = _filter$props$caseSen === undefined ? false : _filter$props$caseSen;\n            currFilters[dataField] = {\n              filterVal: filterVal,\n              filterType: filterType,\n              comparator: comparator,\n              caseSensitive: caseSensitive\n            };\n          }\n          _this2.currFilters = currFilters;\n          if (isRemoteFiltering()) {\n            if (!initialize) {\n              handleFilterChange(_this2.currFilters);\n            }\n            return;\n          }\n          _this2.doFilter(_this2.props);\n        };\n      }\n    }, {\n      key: 'onExternalFilter',\n      value: function onExternalFilter(column, filterType) {\n        var _this3 = this;\n        return function (value) {\n          _this3.onFilter(column, filterType)(value);\n        };\n      }\n    }, {\n      key: 'getFiltered',\n      value: function getFiltered() {\n        return this.data;\n      }\n    }, {\n      key: 'UNSAFE_componentWillReceiveProps',\n      value: function UNSAFE_componentWillReceiveProps(nextProps) {\n        // let nextData = nextProps.data;\n        if (!isRemoteFiltering() && !_.isEqual(nextProps.data, this.data)) {\n          this.doFilter(nextProps, this.isEmitDataChange);\n        } else {\n          this.data = nextProps.data;\n        }\n      }\n    }, {\n      key: 'doFilter',\n      value: function doFilter(props) {\n        var ignoreEmitDataChange = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;\n        var dataChangeListener = props.dataChangeListener,\n          data = props.data,\n          columns = props.columns,\n          filter = props.filter;\n        var result = (0, _filter.filters)(data, columns, _)(this.currFilters, this.clearFilters);\n        if (filter.afterFilter) {\n          filter.afterFilter(result, this.currFilters);\n        }\n        this.data = result;\n        if (dataChangeListener && !ignoreEmitDataChange) {\n          this.isEmitDataChange = true;\n          dataChangeListener.emit('filterChanged', result.length);\n        } else {\n          this.isEmitDataChange = false;\n          this.forceUpdate();\n        }\n      }\n    }, {\n      key: 'render',\n      value: function render() {\n        return _react2.default.createElement(FilterContext.Provider, {\n          value: {\n            data: this.data,\n            onFilter: this.onFilter,\n            onExternalFilter: this.onExternalFilter,\n            currFilters: this.currFilters\n          }\n        }, this.props.children);\n      }\n    }]);\n    return FilterProvider;\n  }(_react2.default.Component);\n  FilterProvider.propTypes = {\n    data: _propTypes2.default.array.isRequired,\n    columns: _propTypes2.default.array.isRequired,\n    dataChangeListener: _propTypes2.default.object\n  };\n  return {\n    Provider: FilterProvider,\n    Consumer: FilterContext.Consumer\n  };\n};","map":null,"metadata":{},"sourceType":"script"}