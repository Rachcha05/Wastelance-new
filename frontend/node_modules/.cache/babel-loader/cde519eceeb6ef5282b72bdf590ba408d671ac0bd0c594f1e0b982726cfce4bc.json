{"ast":null,"code":"import axios from \"../helpers/axios\";\nimport { orderConstants } from \"./constants\";\nimport { toast } from \"react-toastify\";\n\n//action to get customer orders from the database\nexport const getCustomerOrders = () => {\n  return async dispatch => {\n    dispatch({\n      type: orderConstants.GET_CUSTOMER_ORDER_REQUEST\n    });\n    try {\n      const res = await axios.post(\"/order/getCustomerOrders\");\n      if (res.status === 200) {\n        const {\n          orders\n        } = res.data;\n        dispatch({\n          type: orderConstants.GET_CUSTOMER_ORDER_SUCCESS,\n          payload: {\n            orders\n          }\n        });\n      } else {\n        const {\n          error\n        } = res.data;\n        dispatch({\n          type: orderConstants.GET_CUSTOMER_ORDER_FAILURE,\n          payload: {\n            error\n          }\n        });\n      }\n    } catch (error) {\n      console.log(error);\n    }\n  };\n};\n\n//action to update order status\nexport const updateOrder = payload => {\n  return async dispatch => {\n    dispatch({\n      type: orderConstants.UPDATE_CUSTOMER_ORDER_REQUEST\n    });\n    try {\n      const res = await axios.post(\"order/update\", payload);\n      if (res.status === 201) {\n        dispatch({\n          type: orderConstants.UPDATE_CUSTOMER_ORDER_SUCCESS\n        });\n        dispatch(getCustomerOrders());\n        toast.success(\"Order status updated successfully!\", {\n          position: \"top-right\",\n          autoClose: 5000,\n          hideProgressBar: false,\n          closeOnClick: true,\n          pauseOnHover: true,\n          draggable: true,\n          progress: undefined\n        });\n      } else {\n        const {\n          error\n        } = res.data;\n        dispatch({\n          type: orderConstants.UPDATE_CUSTOMER_ORDER_FAILURE,\n          payload: {\n            error\n          }\n        });\n      }\n    } catch (error) {\n      console.log(error);\n    }\n  };\n};\n\n/* import axios from \"../helpers/axios\";\r\nimport { orderConstants } from \"./constants\";\r\n\r\nexport const getCustomerOrders = () => {\r\n  return async (dispatch) => {\r\n    dispatch({ type: orderConstants.GET_CUSTOMER_ORDER_REQUEST });\r\n    try {\r\n      const res = await axios.post(\"/order/getCustomerOrders\");\r\n      if (res.status === 200) {\r\n        const { orders } = res.data;\r\n        dispatch({\r\n          type: orderConstants.GET_CUSTOMER_ORDER_SUCCESS,\r\n          payload: { orders },\r\n        });\r\n      } else {\r\n        const { error } = res.data;\r\n        dispatch({\r\n          type: orderConstants.GET_CUSTOMER_ORDER_FAILURE,\r\n          payload: { error },\r\n        });\r\n      }\r\n    } catch (error) {\r\n      console.log(error);\r\n    }\r\n  };\r\n};\r\n\r\nexport const updateOrder = (payload) => {\r\n  return async (dispatch) => {\r\n    dispatch({ type: orderConstants.UPDATE_CUSTOMER_ORDER_REQUEST });\r\n    try {\r\n      const res = await axios.post(\"/order/update\", payload);\r\n      if (res.status === 201) {\r\n        dispatch({ type: orderConstants.UPDATE_CUSTOMER_ORDER_SUCCESS });\r\n        dispatch(getCustomerOrders());\r\n      } else {\r\n        const { error } = res.data;\r\n        dispatch({\r\n          type: orderConstants.UPDATE_CUSTOMER_ORDER_FAILURE,\r\n          payload: { error },\r\n        });\r\n      }\r\n    } catch (error) {\r\n      console.log(error);\r\n    }\r\n  };\r\n}; */","map":{"version":3,"names":["axios","orderConstants","toast","getCustomerOrders","dispatch","type","GET_CUSTOMER_ORDER_REQUEST","res","post","status","orders","data","GET_CUSTOMER_ORDER_SUCCESS","payload","error","GET_CUSTOMER_ORDER_FAILURE","console","log","updateOrder","UPDATE_CUSTOMER_ORDER_REQUEST","UPDATE_CUSTOMER_ORDER_SUCCESS","success","position","autoClose","hideProgressBar","closeOnClick","pauseOnHover","draggable","progress","undefined","UPDATE_CUSTOMER_ORDER_FAILURE"],"sources":["C:/Users/User/Desktop/Final/frontend/src/actions/order.actions.js"],"sourcesContent":["import axios from \"../helpers/axios\";\r\nimport { orderConstants } from \"./constants\";\r\nimport { toast } from \"react-toastify\";\r\n\r\n//action to get customer orders from the database\r\nexport const getCustomerOrders = () => {\r\n  return async (dispatch) => {\r\n    dispatch({ type: orderConstants.GET_CUSTOMER_ORDER_REQUEST });\r\n    try {\r\n      const res = await axios.post(\"/order/getCustomerOrders\");\r\n      if (res.status === 200) {\r\n        const { orders } = res.data;\r\n        dispatch({\r\n          type: orderConstants.GET_CUSTOMER_ORDER_SUCCESS,\r\n          payload: { orders },\r\n        });\r\n      } else {\r\n        const { error } = res.data;\r\n        dispatch({\r\n          type: orderConstants.GET_CUSTOMER_ORDER_FAILURE,\r\n          payload: { error },\r\n        });\r\n      }\r\n    } catch (error) {\r\n      console.log(error);\r\n    }\r\n  };\r\n};\r\n\r\n//action to update order status\r\nexport const updateOrder = (payload) => {\r\n  return async (dispatch) => {\r\n    dispatch({ type: orderConstants.UPDATE_CUSTOMER_ORDER_REQUEST });\r\n\r\n    try {\r\n      const res = await axios.post(\"order/update\", payload);\r\n\r\n      if (res.status === 201) {\r\n        dispatch({\r\n          type: orderConstants.UPDATE_CUSTOMER_ORDER_SUCCESS,\r\n        });\r\n        dispatch(getCustomerOrders());\r\n        toast.success(\"Order status updated successfully!\", {\r\n          position: \"top-right\",\r\n          autoClose: 5000,\r\n          hideProgressBar: false,\r\n          closeOnClick: true,\r\n          pauseOnHover: true,\r\n          draggable: true,\r\n          progress: undefined,\r\n        });\r\n      } else {\r\n        const { error } = res.data;\r\n        dispatch({\r\n          type: orderConstants.UPDATE_CUSTOMER_ORDER_FAILURE,\r\n          payload: { error },\r\n        });\r\n      }\r\n    } catch (error) {\r\n      console.log(error);\r\n    }\r\n  };\r\n};\r\n\r\n\r\n\r\n/* import axios from \"../helpers/axios\";\r\nimport { orderConstants } from \"./constants\";\r\n\r\nexport const getCustomerOrders = () => {\r\n  return async (dispatch) => {\r\n    dispatch({ type: orderConstants.GET_CUSTOMER_ORDER_REQUEST });\r\n    try {\r\n      const res = await axios.post(\"/order/getCustomerOrders\");\r\n      if (res.status === 200) {\r\n        const { orders } = res.data;\r\n        dispatch({\r\n          type: orderConstants.GET_CUSTOMER_ORDER_SUCCESS,\r\n          payload: { orders },\r\n        });\r\n      } else {\r\n        const { error } = res.data;\r\n        dispatch({\r\n          type: orderConstants.GET_CUSTOMER_ORDER_FAILURE,\r\n          payload: { error },\r\n        });\r\n      }\r\n    } catch (error) {\r\n      console.log(error);\r\n    }\r\n  };\r\n};\r\n\r\nexport const updateOrder = (payload) => {\r\n  return async (dispatch) => {\r\n    dispatch({ type: orderConstants.UPDATE_CUSTOMER_ORDER_REQUEST });\r\n    try {\r\n      const res = await axios.post(\"/order/update\", payload);\r\n      if (res.status === 201) {\r\n        dispatch({ type: orderConstants.UPDATE_CUSTOMER_ORDER_SUCCESS });\r\n        dispatch(getCustomerOrders());\r\n      } else {\r\n        const { error } = res.data;\r\n        dispatch({\r\n          type: orderConstants.UPDATE_CUSTOMER_ORDER_FAILURE,\r\n          payload: { error },\r\n        });\r\n      }\r\n    } catch (error) {\r\n      console.log(error);\r\n    }\r\n  };\r\n}; */"],"mappings":"AAAA,OAAOA,KAAK,MAAM,kBAAkB;AACpC,SAASC,cAAc,QAAQ,aAAa;AAC5C,SAASC,KAAK,QAAQ,gBAAgB;;AAEtC;AACA,OAAO,MAAMC,iBAAiB,GAAGA,CAAA,KAAM;EACrC,OAAO,MAAOC,QAAQ,IAAK;IACzBA,QAAQ,CAAC;MAAEC,IAAI,EAAEJ,cAAc,CAACK;IAA2B,CAAC,CAAC;IAC7D,IAAI;MACF,MAAMC,GAAG,GAAG,MAAMP,KAAK,CAACQ,IAAI,CAAC,0BAA0B,CAAC;MACxD,IAAID,GAAG,CAACE,MAAM,KAAK,GAAG,EAAE;QACtB,MAAM;UAAEC;QAAO,CAAC,GAAGH,GAAG,CAACI,IAAI;QAC3BP,QAAQ,CAAC;UACPC,IAAI,EAAEJ,cAAc,CAACW,0BAA0B;UAC/CC,OAAO,EAAE;YAAEH;UAAO;QACpB,CAAC,CAAC;MACJ,CAAC,MAAM;QACL,MAAM;UAAEI;QAAM,CAAC,GAAGP,GAAG,CAACI,IAAI;QAC1BP,QAAQ,CAAC;UACPC,IAAI,EAAEJ,cAAc,CAACc,0BAA0B;UAC/CF,OAAO,EAAE;YAAEC;UAAM;QACnB,CAAC,CAAC;MACJ;IACF,CAAC,CAAC,OAAOA,KAAK,EAAE;MACdE,OAAO,CAACC,GAAG,CAACH,KAAK,CAAC;IACpB;EACF,CAAC;AACH,CAAC;;AAED;AACA,OAAO,MAAMI,WAAW,GAAIL,OAAO,IAAK;EACtC,OAAO,MAAOT,QAAQ,IAAK;IACzBA,QAAQ,CAAC;MAAEC,IAAI,EAAEJ,cAAc,CAACkB;IAA8B,CAAC,CAAC;IAEhE,IAAI;MACF,MAAMZ,GAAG,GAAG,MAAMP,KAAK,CAACQ,IAAI,CAAC,cAAc,EAAEK,OAAO,CAAC;MAErD,IAAIN,GAAG,CAACE,MAAM,KAAK,GAAG,EAAE;QACtBL,QAAQ,CAAC;UACPC,IAAI,EAAEJ,cAAc,CAACmB;QACvB,CAAC,CAAC;QACFhB,QAAQ,CAACD,iBAAiB,CAAC,CAAC,CAAC;QAC7BD,KAAK,CAACmB,OAAO,CAAC,oCAAoC,EAAE;UAClDC,QAAQ,EAAE,WAAW;UACrBC,SAAS,EAAE,IAAI;UACfC,eAAe,EAAE,KAAK;UACtBC,YAAY,EAAE,IAAI;UAClBC,YAAY,EAAE,IAAI;UAClBC,SAAS,EAAE,IAAI;UACfC,QAAQ,EAAEC;QACZ,CAAC,CAAC;MACJ,CAAC,MAAM;QACL,MAAM;UAAEf;QAAM,CAAC,GAAGP,GAAG,CAACI,IAAI;QAC1BP,QAAQ,CAAC;UACPC,IAAI,EAAEJ,cAAc,CAAC6B,6BAA6B;UAClDjB,OAAO,EAAE;YAAEC;UAAM;QACnB,CAAC,CAAC;MACJ;IACF,CAAC,CAAC,OAAOA,KAAK,EAAE;MACdE,OAAO,CAACC,GAAG,CAACH,KAAK,CAAC;IACpB;EACF,CAAC;AACH,CAAC;;AAID;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA"},"metadata":{},"sourceType":"module","externalDependencies":[]}