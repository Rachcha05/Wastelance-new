{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\User\\\\Desktop\\\\Final\\\\frontend\\\\src\\\\containers\\\\Category\\\\index.js\",\n  _s = $RefreshSig$();\nimport React, { useState } from \"react\";\nimport { Container, Row, Col, Button, Table, ButtonGroup } from \"react-bootstrap\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport { addCategory, updateCategory, deleteCategory } from \"../../actions\";\nimport Layout from \"../../components/Layouts\";\nimport Input from \"../../components/UI/Input\";\nimport NewModal from \"../../components/UI/Modal\";\nimport { generatePublicUrl } from \"../../urlConfig\";\nimport \"./style.css\";\nimport { ToastContainer, toast } from \"react-toastify\";\nimport \"react-toastify/dist/ReactToastify.css\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nfunction Category(props) {\n  _s();\n  const category = useSelector(state => state.category);\n  const [categoryName, setCategoryName] = useState(\"\");\n  const [categoryImage, setCategoryImage] = useState(\"\");\n  const [categoryDescription, setCategoryDescription] = useState(\"\");\n  const [updateCategoryModal, setUpdateCategoryModal] = useState(false);\n  const [deleteCategoryModal, setDeleteCategoryModal] = useState(false);\n  const [currentCategory, setCurrentCategory] = useState({});\n  const [categoryIdUpdate, setCategoryIdUpdate] = useState(\"\");\n  const [categoryNameUpdate, setCategoryNameUpdate] = useState(\"\");\n  const [categoryImageUpdate, setCategoryImageUpdate] = useState(\"\");\n  const [categoryDescriptionUpdate, setCategoryDescriptionUpdate] = useState(\"\");\n  const [categoryDetailsModal, setCategoryDetailsModal] = useState(false);\n  const [categoryDetails, setCategoryDetails] = useState(null);\n  const dispatch = useDispatch();\n  const [show, setShow] = useState(false);\n\n  //adding a new category from user entered form data. Those formdata pass into the addCategory() function in actions\n  const addNewCategory = () => {\n    const form = new FormData();\n\n    //validations of data\n    if (categoryName === \"\") {\n      toast.error(\"Name can't be empty!\", {\n        position: \"top-right\",\n        autoClose: 5000,\n        hideProgressBar: false,\n        closeOnClick: true,\n        pauseOnHover: true,\n        draggable: true,\n        progress: undefined\n      });\n      return;\n    }\n    if (categoryDescription === \"\") {\n      toast.error(\"Description can't be empty!\", {\n        position: \"top-right\",\n        autoClose: 5000,\n        hideProgressBar: false,\n        closeOnClick: true,\n        pauseOnHover: true,\n        draggable: true,\n        progress: undefined\n      });\n      return;\n    }\n    if (!categoryImage) {\n      toast.error(\"Category image can't be empty!\", {\n        position: \"top-right\",\n        autoClose: 5000,\n        hideProgressBar: false,\n        closeOnClick: true,\n        pauseOnHover: true,\n        draggable: true,\n        progress: undefined\n      });\n      return;\n    }\n    form.append(\"name\", categoryName);\n    form.append(\"description\", categoryDescription);\n    form.append(\"categoryImages\", categoryImage);\n    dispatch(addCategory(form));\n    setCategoryName(\"\");\n    setCategoryDescription(\"\");\n    setCategoryImage(\"\");\n  };\n  const handleClose = () => {\n    setShow(false);\n  };\n  const handleShow = () => setShow(true);\n\n  //showing all the categories\n  const renderCategories = categories => {\n    let myCategories = [];\n    for (let category of categories) {\n      myCategories.push( /*#__PURE__*/_jsxDEV(\"tr\", {\n        children: [/*#__PURE__*/_jsxDEV(\"td\", {\n          children: /*#__PURE__*/_jsxDEV(\"div\", {\n            style: {\n              maxWidth: \"100px\"\n            },\n            children: category.categoryImages ? category.categoryImages.map(picture => /*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"categoryImageContainer\",\n              children: /*#__PURE__*/_jsxDEV(\"img\", {\n                src: generatePublicUrl(picture.img),\n                alt: \"\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 113,\n                columnNumber: 23\n              }, this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 112,\n              columnNumber: 21\n            }, this)) : window.location.reload()\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 109,\n            columnNumber: 13\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 108,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n          children: category.name\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 119,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n          children: category.description\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 120,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n          children: [/*#__PURE__*/_jsxDEV(ButtonGroup, {\n            style: {\n              width: \"100%\"\n            },\n            children: [/*#__PURE__*/_jsxDEV(Button, {\n              onClick: () => {\n                updateCategoryData(category);\n              },\n              variant: \"success\",\n              children: \"Edit\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 123,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(Button, {\n              onClick: () => {\n                setDeleteCategoryModal(true);\n                setCurrentCategory(category);\n              },\n              variant: \"danger\",\n              children: \"Delete\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 131,\n              columnNumber: 15\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 122,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(Button, {\n            style: {\n              width: \"100%\"\n            },\n            size: \"sm\",\n            onClick: () => {\n              showCategoryDetailsModal(category);\n            },\n            children: \"Show Full Details\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 141,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 121,\n          columnNumber: 11\n        }, this)]\n      }, category._id, true, {\n        fileName: _jsxFileName,\n        lineNumber: 107,\n        columnNumber: 9\n      }, this));\n    }\n    return myCategories;\n  };\n\n  //handling selected category image\n  const handleCategoryImage = e => {\n    setCategoryImage(e.target.files[0]);\n  };\n\n  //handling selected category image in category updating\n  const handleCategoryImageUpdate = e => {\n    setCategoryImageUpdate(e.target.files[0]);\n  };\n\n  //updating the state after selecting category data to update\n  const updateCategoryData = cat => {\n    setUpdateCategoryModal(true);\n    console.log(cat._id);\n\n    //updating state value according to selected category\n    setCategoryIdUpdate(cat._id);\n    setCategoryNameUpdate(cat.name);\n    setCategoryDescriptionUpdate(cat.description);\n    cat.categoryImages.map(picture => setCategoryImageUpdate(picture.img));\n  };\n\n  //fuction to delete category. dispatching the deleteCategory() from actions\n  const deleteCategoryData = cat => {\n    //dispatching the action to delete selected category\n    dispatch(deleteCategory(cat._id));\n  };\n\n  //popup modal to delete category\n  const renderDeleteCategoryModal = () => {\n    return /*#__PURE__*/_jsxDEV(NewModal, {\n      modalTitle: \"Please Confirm!\",\n      variant: \"danger\",\n      clsBtnName: \"No\",\n      saveBtnName: \"Yes\",\n      addNewItem: () => deleteCategoryData(currentCategory),\n      show: deleteCategoryModal,\n      handleClose: () => {\n        setDeleteCategoryModal(false);\n      },\n      children: `Do you want to delete \"${currentCategory.name}\" category?`\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 191,\n      columnNumber: 7\n    }, this);\n  };\n\n  //show add category popup modal\n  const renderAddCategoriesModal = () => {\n    return /*#__PURE__*/_jsxDEV(NewModal, {\n      show: show,\n      handleClose: handleClose,\n      addNewItem: addNewCategory,\n      modalTitle: \"Add New Category\",\n      cat: true,\n      children: [/*#__PURE__*/_jsxDEV(Input, {\n        lable: \"Category Name\",\n        type: \"text\",\n        value: categoryName,\n        placeholder: \"Category Name\",\n        onChange: e => {\n          setCategoryName(e.target.value);\n        }\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 215,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Input, {\n        lable: \"Category Description\",\n        as: \"textarea\",\n        rows: 3,\n        value: categoryDescription,\n        placeholder: \"Category Description\",\n        onChange: e => {\n          setCategoryDescription(e.target.value);\n        }\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 224,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"input-group mb-3\",\n        children: [/*#__PURE__*/_jsxDEV(\"label\", {\n          className: \"input-group-text\",\n          htmlFor: \"inputGroupFile01\",\n          children: \"Upload Category Image\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 235,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n          type: \"file\",\n          name: \"categoryImage\",\n          className: \"form-control\",\n          id: \"inputGroupFile01\",\n          onChange: handleCategoryImage\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 238,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 234,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 208,\n      columnNumber: 7\n    }, this);\n  };\n\n  //handling the data added to form when updating the category and passing them to updateCategory() in actions\n  const updateCategoryForm = () => {\n    const form = new FormData();\n\n    //validations of data\n    if (categoryNameUpdate === \"\") {\n      toast.error(\"Name can't be empty!\", {\n        position: \"top-right\",\n        autoClose: 5000,\n        hideProgressBar: false,\n        closeOnClick: true,\n        pauseOnHover: true,\n        draggable: true,\n        progress: undefined\n      });\n      return;\n    }\n    if (categoryDescriptionUpdate === \"\") {\n      toast.error(\"Description can't be empty!\", {\n        position: \"top-right\",\n        autoClose: 5000,\n        hideProgressBar: false,\n        closeOnClick: true,\n        pauseOnHover: true,\n        draggable: true,\n        progress: undefined\n      });\n      return;\n    }\n    if (!categoryImageUpdate) {\n      toast.error(\"Category image can't be empty!\", {\n        position: \"top-right\",\n        autoClose: 5000,\n        hideProgressBar: false,\n        closeOnClick: true,\n        pauseOnHover: true,\n        draggable: true,\n        progress: undefined\n      });\n      return;\n    }\n    form.append(\"_id\", categoryIdUpdate);\n    form.append(\"name\", categoryNameUpdate);\n    form.append(\"description\", categoryDescriptionUpdate);\n    form.append(\"categoryImages\", categoryImageUpdate);\n\n    //updating the category with new form data and then updating the category list(getting the updated category list)\n    dispatch(updateCategory(form));\n  };\n\n  //showing update category modal popup\n  const renderUpdateCategoriesModal = () => {\n    return /*#__PURE__*/_jsxDEV(NewModal, {\n      show: updateCategoryModal,\n      handleClose: () => {\n        setUpdateCategoryModal(false);\n      },\n      addNewItem: updateCategoryForm,\n      modalTitle: \"Edit Category\",\n      size: \"lg\",\n      cat: true,\n      children: [/*#__PURE__*/_jsxDEV(Input, {\n        lable: \"Category Name\",\n        type: \"text\",\n        value: categoryNameUpdate,\n        placeholder: \"Category Name\",\n        onChange: e => {\n          setCategoryNameUpdate(e.target.value);\n        }\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 316,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Input, {\n        lable: \"Category Description\",\n        as: \"textarea\",\n        rows: 3,\n        value: categoryDescriptionUpdate,\n        placeholder: \"Category Description\",\n        onChange: e => {\n          setCategoryDescriptionUpdate(e.target.value);\n        }\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 325,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"input-group mb-3\",\n        children: [/*#__PURE__*/_jsxDEV(\"label\", {\n          className: \"input-group-text\",\n          htmlFor: \"inputGroupFile01\",\n          children: \"Upload Category Image\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 336,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n          type: \"file\",\n          name: \"categoryImageUpdate\",\n          className: \"form-control\",\n          id: \"inputGroupFile01\",\n          onChange: handleCategoryImageUpdate\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 339,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 335,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        children: typeof categoryImageUpdate === \"string\" ? /*#__PURE__*/_jsxDEV(Row, {\n          children: [/*#__PURE__*/_jsxDEV(Col, {\n            children: /*#__PURE__*/_jsxDEV(\"label\", {\n              style: {\n                color: \"#333\"\n              },\n              children: [\"Current Image Name: \", /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 352,\n                columnNumber: 39\n              }, this), \" \", categoryImageUpdate]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 351,\n              columnNumber: 17\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 350,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(Col, {\n            children: [/*#__PURE__*/_jsxDEV(\"label\", {\n              style: {\n                color: \"#333\"\n              },\n              children: \"Current Image Preview:\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 356,\n              columnNumber: 17\n            }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 357,\n              columnNumber: 17\n            }, this), /*#__PURE__*/_jsxDEV(\"img\", {\n              style: {\n                maxWidth: \"100px\"\n              },\n              src: generatePublicUrl(categoryImageUpdate),\n              alt: \"Category\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 358,\n              columnNumber: 17\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 355,\n            columnNumber: 15\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 349,\n          columnNumber: 13\n        }, this) : null\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 347,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 306,\n      columnNumber: 7\n    }, this);\n  };\n  const handleCloseCategoryDetailsModal = () => {\n    setCategoryDetailsModal(false);\n  };\n  const showCategoryDetailsModal = category => {\n    setCategoryDetails(category);\n    setCategoryDetailsModal(true);\n    //console.log(category);\n  };\n\n  //showing all the details of the category\n  const renderCategoryDetailsModal = () => {\n    if (!categoryDetails) {\n      return null;\n    }\n    return /*#__PURE__*/_jsxDEV(NewModal, {\n      modalTitle: \"Category Details\",\n      show: categoryDetailsModal,\n      handleClose: handleCloseCategoryDetailsModal,\n      size: \"lg\",\n      hiddenAddBtn: true,\n      children: /*#__PURE__*/_jsxDEV(Row, {\n        children: [/*#__PURE__*/_jsxDEV(Col, {\n          md: \"6\",\n          children: [/*#__PURE__*/_jsxDEV(\"lable\", {\n            className: \"key\",\n            children: \"Id\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 397,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n            className: \"value\",\n            children: categoryDetails._id\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 398,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 396,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(Col, {\n          md: \"6\",\n          children: [/*#__PURE__*/_jsxDEV(\"lable\", {\n            className: \"key\",\n            children: \"Name\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 401,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n            className: \"value\",\n            children: categoryDetails.name\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 402,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 400,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(Col, {\n          md: \"6\",\n          children: [/*#__PURE__*/_jsxDEV(\"lable\", {\n            className: \"key\",\n            children: \"Description\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 405,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n            className: \"value\",\n            children: categoryDetails.description\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 406,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 404,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(Col, {\n          md: \"6\",\n          children: [/*#__PURE__*/_jsxDEV(\"lable\", {\n            className: \"key\",\n            children: \"Added By\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 409,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n            className: \"value\",\n            children: [categoryDetails.createdBy.firstName, \"\\xA0\", categoryDetails.createdBy.lastName]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 410,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 408,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(Col, {\n          md: \"6\",\n          children: [/*#__PURE__*/_jsxDEV(\"lable\", {\n            className: \"key\",\n            children: \"Image\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 416,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            style: {\n              display: \"flex\"\n            },\n            children: categoryDetails.categoryImages.map(picture => /*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"categoryImageContainer\",\n              children: /*#__PURE__*/_jsxDEV(\"img\", {\n                src: generatePublicUrl(picture.img),\n                alt: \"\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 420,\n                columnNumber: 19\n              }, this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 419,\n              columnNumber: 17\n            }, this))\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 417,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 415,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 395,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 388,\n      columnNumber: 7\n    }, this);\n  };\n  return /*#__PURE__*/_jsxDEV(Layout, {\n    sidebar: true,\n    children: [/*#__PURE__*/_jsxDEV(ToastContainer, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 432,\n      columnNumber: 7\n    }, this), category.loading ? /*#__PURE__*/_jsxDEV(\"div\", {\n      class: \"d-flex justify-content-center\",\n      children: /*#__PURE__*/_jsxDEV(\"div\", {\n        class: \"spinner-border text-primary\",\n        role: \"status\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 435,\n        columnNumber: 11\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 434,\n      columnNumber: 9\n    }, this) : /*#__PURE__*/_jsxDEV(_Fragment, {\n      children: [/*#__PURE__*/_jsxDEV(Container, {\n        children: [/*#__PURE__*/_jsxDEV(Row, {\n          children: /*#__PURE__*/_jsxDEV(Col, {\n            md: 12,\n            children: /*#__PURE__*/_jsxDEV(\"div\", {\n              style: {\n                display: \"flex\",\n                justifyContent: \"space-between\"\n              },\n              children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n                children: \"Categories\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 445,\n                columnNumber: 19\n              }, this), /*#__PURE__*/_jsxDEV(Button, {\n                variant: \"dark\",\n                onClick: handleShow,\n                style: {\n                  marginTop: \"5px\"\n                },\n                children: \"Add\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 446,\n                columnNumber: 19\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 442,\n              columnNumber: 17\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 441,\n            columnNumber: 15\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 440,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(Row, {\n          children: /*#__PURE__*/_jsxDEV(Col, {\n            md: 12,\n            children: [/*#__PURE__*/_jsxDEV(Table, {\n              responsive: \"sm\",\n              children: [/*#__PURE__*/_jsxDEV(\"thead\", {\n                children: /*#__PURE__*/_jsxDEV(\"tr\", {\n                  children: [/*#__PURE__*/_jsxDEV(\"th\", {\n                    children: \"Image\"\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 461,\n                    columnNumber: 23\n                  }, this), /*#__PURE__*/_jsxDEV(\"th\", {\n                    children: \"Name\"\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 462,\n                    columnNumber: 23\n                  }, this), /*#__PURE__*/_jsxDEV(\"th\", {\n                    children: \"Description\"\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 463,\n                    columnNumber: 23\n                  }, this), /*#__PURE__*/_jsxDEV(\"th\", {\n                    children: \"Actions\"\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 464,\n                    columnNumber: 23\n                  }, this)]\n                }, void 0, true, {\n                  fileName: _jsxFileName,\n                  lineNumber: 460,\n                  columnNumber: 21\n                }, this)\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 459,\n                columnNumber: 19\n              }, this), /*#__PURE__*/_jsxDEV(\"tbody\", {\n                children: renderCategories(category.categories)\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 467,\n                columnNumber: 19\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 458,\n              columnNumber: 17\n            }, this), \";\"]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 457,\n            columnNumber: 15\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 456,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 439,\n        columnNumber: 11\n      }, this), renderAddCategoriesModal(), renderUpdateCategoriesModal(), renderDeleteCategoryModal(), renderCategoryDetailsModal()]\n    }, void 0, true)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 431,\n    columnNumber: 5\n  }, this);\n}\n_s(Category, \"W5rY3WOsr9L4gJhCP8HGkCx9LrE=\", false, function () {\n  return [useSelector, useDispatch];\n});\n_c = Category;\nexport default Category;\n\n/* import React, { useEffect, useState } from 'react';\r\nimport Layout from '../../components/Layout';\r\nimport { Container, Row, Col} from 'react-bootstrap';\r\nimport { useDispatch, useSelector } from 'react-redux';\r\nimport {\r\n    getAllCategory,\r\n    addCategory,\r\n    updateCategories,\r\n    deleteCategories as deleteCategoriesAction\r\n} from '../../actions';\r\nimport Modal from '../../components/UI/Modal';\r\nimport CheckboxTree from 'react-checkbox-tree';\r\nimport {\r\n    IoIosCheckboxOutline,\r\n    IoIosCheckbox,\r\n    IoIosArrowForward,\r\n    IoIosArrowDown,\r\n    IoIosAdd,\r\n    IoIosTrash,\r\n    IoIosCloudUpload\r\n} from 'react-icons/io'\r\n\r\nimport 'react-checkbox-tree/lib/react-checkbox-tree.css';\r\nimport UpdateCategoriesModal from './components/UpdateCategoriesModal'; \r\n import AddCategoryModal from './components/AddCategoryModal'; \r\nimport './style.css';\r\n\r\n\r\n\r\nconst Category = (props) => {\r\n\r\n    const category = useSelector(state => state.category);\r\n    const [categoryName, setCategoryName] = useState('');\r\n    const [parentCategoryId, setParentCategoryId] = useState('');\r\n    const [categoryImage, setCategoryImage] = useState('');\r\n    const [show, setShow] = useState(false);\r\n    const dispatch = useDispatch();\r\n\r\n   const [checked, setChecked] = useState([]);\r\n    const [expanded, setExpanded] = useState([]);\r\n    const [checkedArray, setCheckedArray] = useState([]);\r\n    const [expandedArray, setExpandedArray] = useState([]);\r\n    const [updateCategoryModal, setUpdateCategoryModal] = useState(false);\r\n    const [deleteCategoryModal, setDeleteCategoryModal] = useState(false);\r\n    \r\n    useEffect(() => {\r\n\r\n        if (!category.loading) {\r\n            setShow(false);\r\n        }\r\n\r\n    }, [category.loading]);\r\n\r\n\r\n    const handleClose = () => {\r\n\r\n        const form = new FormData();\r\n\r\n        if (categoryName === \"\") {\r\n            alert('Category name is required');\r\n            setShow(false);\r\n            return;\r\n        }\r\n\r\n        form.append('name', categoryName);\r\n        form.append('parentId', parentCategoryId);\r\n        form.append('categoryImage', categoryImage);\r\n        dispatch(addCategory(form));\r\n        setCategoryName('');\r\n        setParentCategoryId('');\r\n        setShow(false);\r\n    }\r\n    const handleShow = () => setShow(true);\r\n\r\n    const renderCategories = (categories) => {\r\n        let myCategories = [];\r\n        for (let category of categories) {\r\n            myCategories.push(\r\n                {\r\n                    label: category.name,\r\n                    value: category._id,\r\n                    children: category.children.length > 0 && renderCategories(category.children)\r\n                }\r\n            );\r\n        }\r\n        return myCategories;\r\n    }\r\n\r\n    const createCategoryList = (categories, options = []) => {\r\n\r\n        for (let category of categories) {\r\n            options.push({\r\n                value: category._id,\r\n                name: category.name,\r\n                parentId: category.parentId,\r\n                type: category.type\r\n            });\r\n            if (category.children.length > 0) {\r\n                createCategoryList(category.children, options)\r\n            }\r\n        }\r\n\r\n        return options;\r\n    }\r\n\r\n    const handleCategoryImage = (e) => {\r\n        setCategoryImage(e.target.files[0]);\r\n    }\r\n\r\n    const updateCategory = () => {\r\n        updateCheckedAndExpandedCategories();\r\n        setUpdateCategoryModal(true);\r\n    }\r\n\r\n    const updateCheckedAndExpandedCategories = () => {\r\n        const categories = createCategoryList(category.categories);\r\n        const checkedArray = [];\r\n        const expandedArray = [];\r\n        checked.length > 0 && checked.forEach((categoryId, index) => {\r\n            const category = categories.find((category, _index) => categoryId === category.value);\r\n            category && checkedArray.push(category);\r\n        })\r\n        expanded.length > 0 && expanded.forEach((categoryId, index) => {\r\n            const category = categories.find((category, _index) => categoryId === category.value);\r\n            category && expandedArray.push(category);\r\n        })\r\n        setCheckedArray(checkedArray);\r\n        setExpandedArray(expandedArray);\r\n    }\r\n\r\n    const handleCategoryInput = (key, value, index, type) => {\r\n        console.log(value);\r\n        if (type === \"checked\") {\r\n            const updatedCheckedArray = checkedArray.map((item, _index) =>\r\n                index === _index ? { ...item, [key]: value } : item);\r\n            setCheckedArray(updatedCheckedArray);\r\n        } else if (type === \"expanded\") {\r\n            const updatedExpandedArray = expandedArray.map((item, _index) =>\r\n                index === _index ? { ...item, [key]: value } : item);\r\n            setExpandedArray(updatedExpandedArray);\r\n        }\r\n    }\r\n\r\n    const updateCategoriesForm = () => {\r\n        const form = new FormData();\r\n\r\n        expandedArray.forEach((item, index) => {\r\n            form.append('_id', item.value);\r\n            form.append('name', item.name);\r\n            form.append('parentId', item.parentId ? item.parentId : \"\");\r\n            form.append('type', item.type);\r\n        });\r\n        checkedArray.forEach((item, index) => {\r\n            form.append('_id', item.value);\r\n            form.append('name', item.name);\r\n            form.append('parentId', item.parentId ? item.parentId : \"\");\r\n            form.append('type', item.type);\r\n        });\r\n        dispatch(updateCategories(form));\r\n        \r\n    }\r\n\r\n    const deleteCategory = () => {\r\n        updateCheckedAndExpandedCategories();\r\n        setDeleteCategoryModal(true);\r\n    }\r\n\r\n    const deleteCategories = () => {\r\n        const checkedIdsArray = checkedArray.map((item, index) => ({ _id: item.value }));\r\n       // const expandedIdsArray = expandedArray.map((item, index) => ({ _id: item.value }));\r\n        //const idsArray = expandedIdsArray.concat(checkedIdsArray);\r\n\r\n        if (checkedIdsArray.length > 0) {\r\n            dispatch(deleteCategoriesAction(checkedIdsArray))\r\n                .then(result => {\r\n                    if (result) {\r\n                        dispatch(getAllCategory())\r\n                        setDeleteCategoryModal(false)\r\n                    }\r\n                });\r\n        }\r\n\r\n        setDeleteCategoryModal(false);\r\n\r\n\r\n    }\r\n\r\n    const renderDeleteCategoryModal = () => {\r\n        return (\r\n            <Modal\r\n                modalTitle=\"Confirm\"\r\n                show={deleteCategoryModal}\r\n                handleClose={() => setDeleteCategoryModal(false)}\r\n                buttons={[\r\n                    {\r\n                        label: 'No',\r\n                        color: 'primary',\r\n                        onClick: () => {\r\n                            alert('no');\r\n                        }\r\n                    },\r\n                    {\r\n                        label: 'Yes',\r\n                        color: 'danger',\r\n                        onClick: deleteCategories\r\n                    }\r\n                ]}\r\n            >\r\n\r\n\r\n                <h5>Expanded</h5>\r\n                { expandedArray.map((item, index) => <span key={index}>{item.name}</span>)}\r\n                <h5>Checked</h5>\r\n                { checkedArray.map((item, index) => <span key={index}>{item.name}</span>)}\r\n\r\n            </Modal>\r\n        );\r\n    }\r\n\r\n    const categoryList = createCategoryList(category.categories);\r\n\r\n    return (\r\n        <Layout sidebar>\r\n            <Container>\r\n                <Row>\r\n                    <Col md={12}>\r\n                        <div style={{ display: 'flex', justifyContent: 'space-between' }}>\r\n                            <h3>Category</h3>\r\n                            <div className=\"actionBtnContainer\">\r\n                                <span>Actions: </span>\r\n                                <button onClick={handleShow}><IoIosAdd /> <span>Add</span></button>\r\n                                <button onClick={deleteCategory}><IoIosTrash /> <span>Delete</span></button>\r\n                                <button onClick={updateCategory}><IoIosCloudUpload /> <span>Edit</span></button>\r\n                            </div>\r\n\r\n                        </div>\r\n\r\n                    </Col>\r\n                </Row>\r\n                <Row>\r\n                    <Col md={12}>\r\n                        <CheckboxTree\r\n                            nodes={renderCategories(category.categories)}\r\n                            checked={checked}\r\n                            expanded={expanded}\r\n                            onCheck={checked => setChecked(checked)}\r\n                            onExpand={expanded => setExpanded(expanded)}\r\n                            icons={{\r\n                                check: <IoIosCheckbox />,\r\n                                uncheck: <IoIosCheckboxOutline />,\r\n                                halfCheck: <IoIosCheckboxOutline />,\r\n                                expandClose: <IoIosArrowForward />,\r\n                                expandOpen: <IoIosArrowDown />\r\n                            }}\r\n                        />\r\n                    </Col>\r\n                </Row>\r\n            </Container>\r\n            { <AddCategoryModal\r\n                show={show}\r\n                handleClose={() => setShow(false)}\r\n                onSubmit={handleClose}\r\n                modalTitle={'Add New Category'}\r\n                categoryName={categoryName}\r\n                setCategoryName={setCategoryName}\r\n                parentCategoryId={parentCategoryId}\r\n                setParentCategoryId={setParentCategoryId}\r\n                categoryList={categoryList}\r\n                handleCategoryImage={handleCategoryImage}\r\n            /> }\r\n            { <UpdateCategoriesModal\r\n                show={updateCategoryModal}\r\n                handleClose={() => setUpdateCategoryModal(false)}\r\n                onSubmit={updateCategoriesForm}\r\n                modalTitle={'Update Categories'}\r\n                size=\"lg\"\r\n                expandedArray={expandedArray}\r\n                checkedArray={checkedArray}\r\n                handleCategoryInput={handleCategoryInput}\r\n                categoryList={categoryList}\r\n            /> }\r\n            { /*{renderAddCategoryModal()}*/\n/*   {renderDeleteCategoryModal()}\r\n</Layout>\r\n)\r\n}\r\nexport default Category */\nvar _c;\n$RefreshReg$(_c, \"Category\");","map":{"version":3,"names":["React","useState","Container","Row","Col","Button","Table","ButtonGroup","useDispatch","useSelector","addCategory","updateCategory","deleteCategory","Layout","Input","NewModal","generatePublicUrl","ToastContainer","toast","jsxDEV","_jsxDEV","Fragment","_Fragment","Category","props","_s","category","state","categoryName","setCategoryName","categoryImage","setCategoryImage","categoryDescription","setCategoryDescription","updateCategoryModal","setUpdateCategoryModal","deleteCategoryModal","setDeleteCategoryModal","currentCategory","setCurrentCategory","categoryIdUpdate","setCategoryIdUpdate","categoryNameUpdate","setCategoryNameUpdate","categoryImageUpdate","setCategoryImageUpdate","categoryDescriptionUpdate","setCategoryDescriptionUpdate","categoryDetailsModal","setCategoryDetailsModal","categoryDetails","setCategoryDetails","dispatch","show","setShow","addNewCategory","form","FormData","error","position","autoClose","hideProgressBar","closeOnClick","pauseOnHover","draggable","progress","undefined","append","handleClose","handleShow","renderCategories","categories","myCategories","push","children","style","maxWidth","categoryImages","map","picture","className","src","img","alt","fileName","_jsxFileName","lineNumber","columnNumber","window","location","reload","name","description","width","onClick","updateCategoryData","variant","size","showCategoryDetailsModal","_id","handleCategoryImage","e","target","files","handleCategoryImageUpdate","cat","console","log","deleteCategoryData","renderDeleteCategoryModal","modalTitle","clsBtnName","saveBtnName","addNewItem","renderAddCategoriesModal","lable","type","value","placeholder","onChange","as","rows","htmlFor","id","updateCategoryForm","renderUpdateCategoriesModal","color","handleCloseCategoryDetailsModal","renderCategoryDetailsModal","hiddenAddBtn","md","createdBy","firstName","lastName","display","sidebar","loading","class","role","justifyContent","marginTop","responsive","_c","$RefreshReg$"],"sources":["C:/Users/User/Desktop/Final/frontend/src/containers/Category/index.js"],"sourcesContent":["import React, { useState } from \"react\";\r\nimport {\r\n  Container,\r\n  Row,\r\n  Col,\r\n  Button,\r\n  Table,\r\n  ButtonGroup,\r\n} from \"react-bootstrap\";\r\nimport { useDispatch, useSelector } from \"react-redux\";\r\nimport { addCategory, updateCategory, deleteCategory } from \"../../actions\";\r\nimport Layout from \"../../components/Layouts\";\r\nimport Input from \"../../components/UI/Input\";\r\nimport NewModal from \"../../components/UI/Modal\";\r\nimport { generatePublicUrl } from \"../../urlConfig\";\r\nimport \"./style.css\";\r\nimport { ToastContainer, toast } from \"react-toastify\";\r\nimport \"react-toastify/dist/ReactToastify.css\";\r\n\r\nfunction Category(props) {\r\n  const category = useSelector((state) => state.category);\r\n\r\n  const [categoryName, setCategoryName] = useState(\"\");\r\n  const [categoryImage, setCategoryImage] = useState(\"\");\r\n  const [categoryDescription, setCategoryDescription] = useState(\"\");\r\n  const [updateCategoryModal, setUpdateCategoryModal] = useState(false);\r\n  const [deleteCategoryModal, setDeleteCategoryModal] = useState(false);\r\n  const [currentCategory, setCurrentCategory] = useState({});\r\n\r\n  const [categoryIdUpdate, setCategoryIdUpdate] = useState(\"\");\r\n  const [categoryNameUpdate, setCategoryNameUpdate] = useState(\"\");\r\n  const [categoryImageUpdate, setCategoryImageUpdate] = useState(\"\");\r\n  const [categoryDescriptionUpdate, setCategoryDescriptionUpdate] =\r\n    useState(\"\");\r\n\r\n  const [categoryDetailsModal, setCategoryDetailsModal] = useState(false);\r\n  const [categoryDetails, setCategoryDetails] = useState(null);\r\n\r\n  const dispatch = useDispatch();\r\n\r\n  const [show, setShow] = useState(false);\r\n\r\n  //adding a new category from user entered form data. Those formdata pass into the addCategory() function in actions\r\n  const addNewCategory = () => {\r\n    const form = new FormData();\r\n\r\n    //validations of data\r\n    if (categoryName === \"\") {\r\n      toast.error(\"Name can't be empty!\", {\r\n        position: \"top-right\",\r\n        autoClose: 5000,\r\n        hideProgressBar: false,\r\n        closeOnClick: true,\r\n        pauseOnHover: true,\r\n        draggable: true,\r\n        progress: undefined,\r\n      });\r\n      return;\r\n    }\r\n    if (categoryDescription === \"\") {\r\n      toast.error(\"Description can't be empty!\", {\r\n        position: \"top-right\",\r\n        autoClose: 5000,\r\n        hideProgressBar: false,\r\n        closeOnClick: true,\r\n        pauseOnHover: true,\r\n        draggable: true,\r\n        progress: undefined,\r\n      });\r\n      return;\r\n    }\r\n    if (!categoryImage) {\r\n      toast.error(\"Category image can't be empty!\", {\r\n        position: \"top-right\",\r\n        autoClose: 5000,\r\n        hideProgressBar: false,\r\n        closeOnClick: true,\r\n        pauseOnHover: true,\r\n        draggable: true,\r\n        progress: undefined,\r\n      });\r\n      return;\r\n    }\r\n\r\n    form.append(\"name\", categoryName);\r\n    form.append(\"description\", categoryDescription);\r\n    form.append(\"categoryImages\", categoryImage);\r\n\r\n    dispatch(addCategory(form));\r\n\r\n    setCategoryName(\"\");\r\n    setCategoryDescription(\"\");\r\n    setCategoryImage(\"\");\r\n  };\r\n\r\n  const handleClose = () => {\r\n    setShow(false);\r\n  };\r\n  const handleShow = () => setShow(true);\r\n\r\n  //showing all the categories\r\n  const renderCategories = (categories) => {\r\n    let myCategories = [];\r\n\r\n    for (let category of categories) {\r\n      myCategories.push(\r\n        <tr key={category._id}>\r\n          <td>\r\n            <div style={{ maxWidth: \"100px\" }}>\r\n              {category.categoryImages\r\n                ? category.categoryImages.map((picture) => (\r\n                    <div className=\"categoryImageContainer\">\r\n                      <img src={generatePublicUrl(picture.img)} alt=\"\" />\r\n                    </div>\r\n                  ))\r\n                : window.location.reload()}\r\n            </div>\r\n          </td>\r\n          <td>{category.name}</td>\r\n          <td>{category.description}</td>\r\n          <td>\r\n            <ButtonGroup style={{ width: \"100%\" }}>\r\n              <Button\r\n                onClick={() => {\r\n                  updateCategoryData(category);\r\n                }}\r\n                variant=\"success\"\r\n              >\r\n                Edit\r\n              </Button>\r\n              <Button\r\n                onClick={() => {\r\n                  setDeleteCategoryModal(true);\r\n                  setCurrentCategory(category);\r\n                }}\r\n                variant=\"danger\"\r\n              >\r\n                Delete\r\n              </Button>\r\n            </ButtonGroup>\r\n            <Button\r\n              style={{ width: \"100%\" }}\r\n              size=\"sm\"\r\n              onClick={() => {\r\n                showCategoryDetailsModal(category);\r\n              }}\r\n            >\r\n              Show Full Details\r\n            </Button>\r\n          </td>\r\n        </tr>\r\n      );\r\n    }\r\n\r\n    return myCategories;\r\n  };\r\n\r\n  //handling selected category image\r\n  const handleCategoryImage = (e) => {\r\n    setCategoryImage(e.target.files[0]);\r\n  };\r\n\r\n  //handling selected category image in category updating\r\n  const handleCategoryImageUpdate = (e) => {\r\n    setCategoryImageUpdate(e.target.files[0]);\r\n  };\r\n\r\n  //updating the state after selecting category data to update\r\n  const updateCategoryData = (cat) => {\r\n    setUpdateCategoryModal(true);\r\n\r\n    console.log(cat._id);\r\n\r\n    //updating state value according to selected category\r\n    setCategoryIdUpdate(cat._id);\r\n    setCategoryNameUpdate(cat.name);\r\n    setCategoryDescriptionUpdate(cat.description);\r\n\r\n    cat.categoryImages.map((picture) => setCategoryImageUpdate(picture.img));\r\n  };\r\n\r\n  //fuction to delete category. dispatching the deleteCategory() from actions\r\n  const deleteCategoryData = (cat) => {\r\n    //dispatching the action to delete selected category\r\n    dispatch(deleteCategory(cat._id));\r\n  };\r\n\r\n  //popup modal to delete category\r\n  const renderDeleteCategoryModal = () => {\r\n    return (\r\n      <NewModal\r\n        modalTitle=\"Please Confirm!\"\r\n        variant=\"danger\"\r\n        clsBtnName=\"No\"\r\n        saveBtnName=\"Yes\"\r\n        addNewItem={() => deleteCategoryData(currentCategory)}\r\n        show={deleteCategoryModal}\r\n        handleClose={() => {\r\n          setDeleteCategoryModal(false);\r\n        }}\r\n      >{`Do you want to delete \"${currentCategory.name}\" category?`}</NewModal>\r\n    );\r\n  };\r\n\r\n  //show add category popup modal\r\n  const renderAddCategoriesModal = () => {\r\n    return (\r\n      <NewModal\r\n        show={show}\r\n        handleClose={handleClose}\r\n        addNewItem={addNewCategory}\r\n        modalTitle=\"Add New Category\"\r\n        cat={true}\r\n      >\r\n        <Input\r\n          lable=\"Category Name\"\r\n          type={\"text\"}\r\n          value={categoryName}\r\n          placeholder={\"Category Name\"}\r\n          onChange={(e) => {\r\n            setCategoryName(e.target.value);\r\n          }}\r\n        />\r\n        <Input\r\n          lable=\"Category Description\"\r\n          as=\"textarea\"\r\n          rows={3}\r\n          value={categoryDescription}\r\n          placeholder={\"Category Description\"}\r\n          onChange={(e) => {\r\n            setCategoryDescription(e.target.value);\r\n          }}\r\n        />\r\n        <div className=\"input-group mb-3\">\r\n          <label className=\"input-group-text\" htmlFor=\"inputGroupFile01\">\r\n            Upload Category Image\r\n          </label>\r\n          <input\r\n            type=\"file\"\r\n            name=\"categoryImage\"\r\n            className=\"form-control\"\r\n            id=\"inputGroupFile01\"\r\n            onChange={handleCategoryImage}\r\n          />\r\n        </div>\r\n      </NewModal>\r\n    );\r\n  };\r\n\r\n  //handling the data added to form when updating the category and passing them to updateCategory() in actions\r\n  const updateCategoryForm = () => {\r\n    const form = new FormData();\r\n\r\n    //validations of data\r\n    if (categoryNameUpdate === \"\") {\r\n      toast.error(\"Name can't be empty!\", {\r\n        position: \"top-right\",\r\n        autoClose: 5000,\r\n        hideProgressBar: false,\r\n        closeOnClick: true,\r\n        pauseOnHover: true,\r\n        draggable: true,\r\n        progress: undefined,\r\n      });\r\n      return;\r\n    }\r\n\r\n    if (categoryDescriptionUpdate === \"\") {\r\n      toast.error(\"Description can't be empty!\", {\r\n        position: \"top-right\",\r\n        autoClose: 5000,\r\n        hideProgressBar: false,\r\n        closeOnClick: true,\r\n        pauseOnHover: true,\r\n        draggable: true,\r\n        progress: undefined,\r\n      });\r\n      return;\r\n    }\r\n\r\n    if (!categoryImageUpdate) {\r\n      toast.error(\"Category image can't be empty!\", {\r\n        position: \"top-right\",\r\n        autoClose: 5000,\r\n        hideProgressBar: false,\r\n        closeOnClick: true,\r\n        pauseOnHover: true,\r\n        draggable: true,\r\n        progress: undefined,\r\n      });\r\n      return;\r\n    }\r\n\r\n    form.append(\"_id\", categoryIdUpdate);\r\n    form.append(\"name\", categoryNameUpdate);\r\n    form.append(\"description\", categoryDescriptionUpdate);\r\n    form.append(\"categoryImages\", categoryImageUpdate);\r\n\r\n    //updating the category with new form data and then updating the category list(getting the updated category list)\r\n    dispatch(updateCategory(form));\r\n  };\r\n\r\n  //showing update category modal popup\r\n  const renderUpdateCategoriesModal = () => {\r\n    return (\r\n      <NewModal\r\n        show={updateCategoryModal}\r\n        handleClose={() => {\r\n          setUpdateCategoryModal(false);\r\n        }}\r\n        addNewItem={updateCategoryForm}\r\n        modalTitle=\"Edit Category\"\r\n        size=\"lg\"\r\n        cat={true}\r\n      >\r\n        <Input\r\n          lable=\"Category Name\"\r\n          type={\"text\"}\r\n          value={categoryNameUpdate}\r\n          placeholder={\"Category Name\"}\r\n          onChange={(e) => {\r\n            setCategoryNameUpdate(e.target.value);\r\n          }}\r\n        />\r\n        <Input\r\n          lable=\"Category Description\"\r\n          as=\"textarea\"\r\n          rows={3}\r\n          value={categoryDescriptionUpdate}\r\n          placeholder={\"Category Description\"}\r\n          onChange={(e) => {\r\n            setCategoryDescriptionUpdate(e.target.value);\r\n          }}\r\n        />\r\n        <div className=\"input-group mb-3\">\r\n          <label className=\"input-group-text\" htmlFor=\"inputGroupFile01\">\r\n            Upload Category Image\r\n          </label>\r\n          <input\r\n            type=\"file\"\r\n            name=\"categoryImageUpdate\"\r\n            className=\"form-control\"\r\n            id=\"inputGroupFile01\"\r\n            onChange={handleCategoryImageUpdate}\r\n          />\r\n        </div>\r\n        <div>\r\n          {typeof categoryImageUpdate === \"string\" ? (\r\n            <Row>\r\n              <Col>\r\n                <label style={{ color: \"#333\" }}>\r\n                  Current Image Name: <br></br> {categoryImageUpdate}\r\n                </label>\r\n              </Col>\r\n              <Col>\r\n                <label style={{ color: \"#333\" }}>Current Image Preview:</label>\r\n                <br></br>\r\n                <img\r\n                  style={{ maxWidth: \"100px\" }}\r\n                  src={generatePublicUrl(categoryImageUpdate)}\r\n                  alt=\"Category\"\r\n                />\r\n              </Col>\r\n            </Row>\r\n          ) : null}\r\n        </div>\r\n      </NewModal>\r\n    );\r\n  };\r\n\r\n  const handleCloseCategoryDetailsModal = () => {\r\n    setCategoryDetailsModal(false);\r\n  };\r\n\r\n  const showCategoryDetailsModal = (category) => {\r\n    setCategoryDetails(category);\r\n    setCategoryDetailsModal(true);\r\n    //console.log(category);\r\n  };\r\n\r\n  //showing all the details of the category\r\n  const renderCategoryDetailsModal = () => {\r\n    if (!categoryDetails) {\r\n      return null;\r\n    }\r\n\r\n    return (\r\n      <NewModal\r\n        modalTitle={\"Category Details\"}\r\n        show={categoryDetailsModal}\r\n        handleClose={handleCloseCategoryDetailsModal}\r\n        size=\"lg\"\r\n        hiddenAddBtn={true}\r\n      >\r\n        <Row>\r\n          <Col md=\"6\">\r\n            <lable className=\"key\">Id</lable>\r\n            <p className=\"value\">{categoryDetails._id}</p>\r\n          </Col>\r\n          <Col md=\"6\">\r\n            <lable className=\"key\">Name</lable>\r\n            <p className=\"value\">{categoryDetails.name}</p>\r\n          </Col>\r\n          <Col md=\"6\">\r\n            <lable className=\"key\">Description</lable>\r\n            <p className=\"value\">{categoryDetails.description}</p>\r\n          </Col>\r\n          <Col md=\"6\">\r\n            <lable className=\"key\">Added By</lable>\r\n            <p className=\"value\">\r\n              {categoryDetails.createdBy.firstName}&nbsp;\r\n              {categoryDetails.createdBy.lastName}\r\n            </p>\r\n          </Col>\r\n          <Col md=\"6\">\r\n            <lable className=\"key\">Image</lable>\r\n            <div style={{ display: \"flex\" }}>\r\n              {categoryDetails.categoryImages.map((picture) => (\r\n                <div className=\"categoryImageContainer\">\r\n                  <img src={generatePublicUrl(picture.img)} alt=\"\" />\r\n                </div>\r\n              ))}\r\n            </div>\r\n          </Col>\r\n        </Row>\r\n      </NewModal>\r\n    );\r\n  };\r\n\r\n  return (\r\n    <Layout sidebar>\r\n      <ToastContainer />\r\n      {category.loading ? (\r\n        <div class=\"d-flex justify-content-center\">\r\n          <div class=\"spinner-border text-primary\" role=\"status\"></div>\r\n        </div>\r\n      ) : (\r\n        <>\r\n          <Container>\r\n            <Row>\r\n              <Col md={12}>\r\n                <div\r\n                  style={{ display: \"flex\", justifyContent: \"space-between\" }}\r\n                >\r\n                  <h3>Categories</h3>\r\n                  <Button\r\n                    variant=\"dark\"\r\n                    onClick={handleShow}\r\n                    style={{ marginTop: \"5px\" }}\r\n                  >\r\n                    Add\r\n                  </Button>\r\n                </div>\r\n              </Col>\r\n            </Row>\r\n            <Row>\r\n              <Col md={12}>\r\n                <Table responsive=\"sm\">\r\n                  <thead>\r\n                    <tr>\r\n                      <th>Image</th>\r\n                      <th>Name</th>\r\n                      <th>Description</th>\r\n                      <th>Actions</th>\r\n                    </tr>\r\n                  </thead>\r\n                  <tbody>{renderCategories(category.categories)}</tbody>\r\n                </Table>\r\n                ;\r\n              </Col>\r\n            </Row>\r\n          </Container>\r\n          {renderAddCategoriesModal()}\r\n          {renderUpdateCategoriesModal()}\r\n          {renderDeleteCategoryModal()}\r\n          {renderCategoryDetailsModal()}\r\n        </>\r\n      )}\r\n    </Layout>\r\n  );\r\n}\r\n\r\nexport default Category;\r\n\r\n\r\n\r\n\r\n\r\n/* import React, { useEffect, useState } from 'react';\r\nimport Layout from '../../components/Layout';\r\nimport { Container, Row, Col} from 'react-bootstrap';\r\nimport { useDispatch, useSelector } from 'react-redux';\r\nimport {\r\n    getAllCategory,\r\n    addCategory,\r\n    updateCategories,\r\n    deleteCategories as deleteCategoriesAction\r\n} from '../../actions';\r\nimport Modal from '../../components/UI/Modal';\r\nimport CheckboxTree from 'react-checkbox-tree';\r\nimport {\r\n    IoIosCheckboxOutline,\r\n    IoIosCheckbox,\r\n    IoIosArrowForward,\r\n    IoIosArrowDown,\r\n    IoIosAdd,\r\n    IoIosTrash,\r\n    IoIosCloudUpload\r\n} from 'react-icons/io'\r\n\r\nimport 'react-checkbox-tree/lib/react-checkbox-tree.css';\r\nimport UpdateCategoriesModal from './components/UpdateCategoriesModal'; \r\n import AddCategoryModal from './components/AddCategoryModal'; \r\nimport './style.css';\r\n\r\n\r\n\r\nconst Category = (props) => {\r\n\r\n    const category = useSelector(state => state.category);\r\n    const [categoryName, setCategoryName] = useState('');\r\n    const [parentCategoryId, setParentCategoryId] = useState('');\r\n    const [categoryImage, setCategoryImage] = useState('');\r\n    const [show, setShow] = useState(false);\r\n    const dispatch = useDispatch();\r\n\r\n   const [checked, setChecked] = useState([]);\r\n    const [expanded, setExpanded] = useState([]);\r\n    const [checkedArray, setCheckedArray] = useState([]);\r\n    const [expandedArray, setExpandedArray] = useState([]);\r\n    const [updateCategoryModal, setUpdateCategoryModal] = useState(false);\r\n    const [deleteCategoryModal, setDeleteCategoryModal] = useState(false);\r\n    \r\n    useEffect(() => {\r\n\r\n        if (!category.loading) {\r\n            setShow(false);\r\n        }\r\n\r\n    }, [category.loading]);\r\n\r\n\r\n    const handleClose = () => {\r\n\r\n        const form = new FormData();\r\n\r\n        if (categoryName === \"\") {\r\n            alert('Category name is required');\r\n            setShow(false);\r\n            return;\r\n        }\r\n\r\n        form.append('name', categoryName);\r\n        form.append('parentId', parentCategoryId);\r\n        form.append('categoryImage', categoryImage);\r\n        dispatch(addCategory(form));\r\n        setCategoryName('');\r\n        setParentCategoryId('');\r\n        setShow(false);\r\n    }\r\n    const handleShow = () => setShow(true);\r\n\r\n    const renderCategories = (categories) => {\r\n        let myCategories = [];\r\n        for (let category of categories) {\r\n            myCategories.push(\r\n                {\r\n                    label: category.name,\r\n                    value: category._id,\r\n                    children: category.children.length > 0 && renderCategories(category.children)\r\n                }\r\n            );\r\n        }\r\n        return myCategories;\r\n    }\r\n\r\n    const createCategoryList = (categories, options = []) => {\r\n\r\n        for (let category of categories) {\r\n            options.push({\r\n                value: category._id,\r\n                name: category.name,\r\n                parentId: category.parentId,\r\n                type: category.type\r\n            });\r\n            if (category.children.length > 0) {\r\n                createCategoryList(category.children, options)\r\n            }\r\n        }\r\n\r\n        return options;\r\n    }\r\n\r\n    const handleCategoryImage = (e) => {\r\n        setCategoryImage(e.target.files[0]);\r\n    }\r\n\r\n    const updateCategory = () => {\r\n        updateCheckedAndExpandedCategories();\r\n        setUpdateCategoryModal(true);\r\n    }\r\n\r\n    const updateCheckedAndExpandedCategories = () => {\r\n        const categories = createCategoryList(category.categories);\r\n        const checkedArray = [];\r\n        const expandedArray = [];\r\n        checked.length > 0 && checked.forEach((categoryId, index) => {\r\n            const category = categories.find((category, _index) => categoryId === category.value);\r\n            category && checkedArray.push(category);\r\n        })\r\n        expanded.length > 0 && expanded.forEach((categoryId, index) => {\r\n            const category = categories.find((category, _index) => categoryId === category.value);\r\n            category && expandedArray.push(category);\r\n        })\r\n        setCheckedArray(checkedArray);\r\n        setExpandedArray(expandedArray);\r\n    }\r\n\r\n    const handleCategoryInput = (key, value, index, type) => {\r\n        console.log(value);\r\n        if (type === \"checked\") {\r\n            const updatedCheckedArray = checkedArray.map((item, _index) =>\r\n                index === _index ? { ...item, [key]: value } : item);\r\n            setCheckedArray(updatedCheckedArray);\r\n        } else if (type === \"expanded\") {\r\n            const updatedExpandedArray = expandedArray.map((item, _index) =>\r\n                index === _index ? { ...item, [key]: value } : item);\r\n            setExpandedArray(updatedExpandedArray);\r\n        }\r\n    }\r\n\r\n    const updateCategoriesForm = () => {\r\n        const form = new FormData();\r\n\r\n        expandedArray.forEach((item, index) => {\r\n            form.append('_id', item.value);\r\n            form.append('name', item.name);\r\n            form.append('parentId', item.parentId ? item.parentId : \"\");\r\n            form.append('type', item.type);\r\n        });\r\n        checkedArray.forEach((item, index) => {\r\n            form.append('_id', item.value);\r\n            form.append('name', item.name);\r\n            form.append('parentId', item.parentId ? item.parentId : \"\");\r\n            form.append('type', item.type);\r\n        });\r\n        dispatch(updateCategories(form));\r\n        \r\n    }\r\n\r\n    const deleteCategory = () => {\r\n        updateCheckedAndExpandedCategories();\r\n        setDeleteCategoryModal(true);\r\n    }\r\n\r\n    const deleteCategories = () => {\r\n        const checkedIdsArray = checkedArray.map((item, index) => ({ _id: item.value }));\r\n       // const expandedIdsArray = expandedArray.map((item, index) => ({ _id: item.value }));\r\n        //const idsArray = expandedIdsArray.concat(checkedIdsArray);\r\n\r\n        if (checkedIdsArray.length > 0) {\r\n            dispatch(deleteCategoriesAction(checkedIdsArray))\r\n                .then(result => {\r\n                    if (result) {\r\n                        dispatch(getAllCategory())\r\n                        setDeleteCategoryModal(false)\r\n                    }\r\n                });\r\n        }\r\n\r\n        setDeleteCategoryModal(false);\r\n\r\n\r\n    }\r\n\r\n    const renderDeleteCategoryModal = () => {\r\n        return (\r\n            <Modal\r\n                modalTitle=\"Confirm\"\r\n                show={deleteCategoryModal}\r\n                handleClose={() => setDeleteCategoryModal(false)}\r\n                buttons={[\r\n                    {\r\n                        label: 'No',\r\n                        color: 'primary',\r\n                        onClick: () => {\r\n                            alert('no');\r\n                        }\r\n                    },\r\n                    {\r\n                        label: 'Yes',\r\n                        color: 'danger',\r\n                        onClick: deleteCategories\r\n                    }\r\n                ]}\r\n            >\r\n\r\n\r\n                <h5>Expanded</h5>\r\n                { expandedArray.map((item, index) => <span key={index}>{item.name}</span>)}\r\n                <h5>Checked</h5>\r\n                { checkedArray.map((item, index) => <span key={index}>{item.name}</span>)}\r\n\r\n            </Modal>\r\n        );\r\n    }\r\n\r\n    const categoryList = createCategoryList(category.categories);\r\n\r\n    return (\r\n        <Layout sidebar>\r\n            <Container>\r\n                <Row>\r\n                    <Col md={12}>\r\n                        <div style={{ display: 'flex', justifyContent: 'space-between' }}>\r\n                            <h3>Category</h3>\r\n                            <div className=\"actionBtnContainer\">\r\n                                <span>Actions: </span>\r\n                                <button onClick={handleShow}><IoIosAdd /> <span>Add</span></button>\r\n                                <button onClick={deleteCategory}><IoIosTrash /> <span>Delete</span></button>\r\n                                <button onClick={updateCategory}><IoIosCloudUpload /> <span>Edit</span></button>\r\n                            </div>\r\n\r\n                        </div>\r\n\r\n                    </Col>\r\n                </Row>\r\n                <Row>\r\n                    <Col md={12}>\r\n                        <CheckboxTree\r\n                            nodes={renderCategories(category.categories)}\r\n                            checked={checked}\r\n                            expanded={expanded}\r\n                            onCheck={checked => setChecked(checked)}\r\n                            onExpand={expanded => setExpanded(expanded)}\r\n                            icons={{\r\n                                check: <IoIosCheckbox />,\r\n                                uncheck: <IoIosCheckboxOutline />,\r\n                                halfCheck: <IoIosCheckboxOutline />,\r\n                                expandClose: <IoIosArrowForward />,\r\n                                expandOpen: <IoIosArrowDown />\r\n                            }}\r\n                        />\r\n                    </Col>\r\n                </Row>\r\n            </Container>\r\n            { <AddCategoryModal\r\n                show={show}\r\n                handleClose={() => setShow(false)}\r\n                onSubmit={handleClose}\r\n                modalTitle={'Add New Category'}\r\n                categoryName={categoryName}\r\n                setCategoryName={setCategoryName}\r\n                parentCategoryId={parentCategoryId}\r\n                setParentCategoryId={setParentCategoryId}\r\n                categoryList={categoryList}\r\n                handleCategoryImage={handleCategoryImage}\r\n            /> }\r\n            { <UpdateCategoriesModal\r\n                show={updateCategoryModal}\r\n                handleClose={() => setUpdateCategoryModal(false)}\r\n                onSubmit={updateCategoriesForm}\r\n                modalTitle={'Update Categories'}\r\n                size=\"lg\"\r\n                expandedArray={expandedArray}\r\n                checkedArray={checkedArray}\r\n                handleCategoryInput={handleCategoryInput}\r\n                categoryList={categoryList}\r\n            /> }\r\n            { /*{renderAddCategoryModal()}*/ \r\n          /*   {renderDeleteCategoryModal()}\r\n        </Layout>\r\n    )\r\n\r\n}\r\n\r\nexport default Category */ "],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}