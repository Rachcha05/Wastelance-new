{"ast":null,"code":"// axios use to perform HTTP requests(APIs), that works in both Browser(front-end) and Node. js(backend) platforms.\n//creating axios instance for easy usage for every needed page\nimport axios from \"axios\";\nimport { api } from \"../urlConfig\";\nimport store from \"../store\";\nimport { authConstants } from \"../actions/constants\";\nvar token = window.localStorage.getItem(\"token\");\n\n//instancing common data such as baseURL (it is common for all apis) for easy use\nvar axiosInstance = axios.create({\n  baseURL: api,\n  headers: {\n    Authorization: token ? \"Bearer \".concat(token) : \"\"\n  }\n});\n\n//intercepting the req or res before they are handled by then or catch\n//if an error happen when sending a request handling it\naxiosInstance.interceptors.request.use(function (req) {\n  //assigning the new token after login again after logout\n  var _store$getState = store.getState(),\n    auth = _store$getState.auth;\n  if (auth.token) {\n    req.headers.Authorization = \"Bearer \".concat(auth.token);\n  }\n  return req;\n});\n\n//if an error happen when receiving a respond handling it\naxiosInstance.interceptors.response.use(function (res) {\n  return res;\n}, function (error) {\n  console.log(error.response);\n  var status = error.response ? error.response.status : 500;\n  if (status && status === 500) {\n    //if error = 500 mean users token is expired. Then we have to logout the user\n    localStorage.clear();\n    store.dispatch({\n      type: authConstants.LOGOUT_SUCCESS\n    });\n  }\n  return Promise.reject(error);\n});\nexport default axiosInstance;","map":{"version":3,"names":["axios","api","store","authConstants","token","window","localStorage","getItem","axiosInstance","create","baseURL","headers","Authorization","concat","interceptors","request","use","req","_store$getState","getState","auth","response","res","error","console","log","status","clear","dispatch","type","LOGOUT_SUCCESS","Promise","reject"],"sources":["C:/Users/User/Desktop/Final/frontend/src/helpers/axios.js"],"sourcesContent":["// axios use to perform HTTP requests(APIs), that works in both Browser(front-end) and Node. js(backend) platforms.\r\n//creating axios instance for easy usage for every needed page\r\nimport axios from \"axios\";\r\nimport { api } from \"../urlConfig\";\r\nimport store from \"../store\";\r\nimport { authConstants } from \"../actions/constants\";\r\n\r\nconst token = window.localStorage.getItem(\"token\");\r\n\r\n//instancing common data such as baseURL (it is common for all apis) for easy use\r\nconst axiosInstance = axios.create({\r\n  baseURL: api,\r\n  headers: { Authorization: token ? `Bearer ${token}` : \"\" },\r\n});\r\n\r\n//intercepting the req or res before they are handled by then or catch\r\n//if an error happen when sending a request handling it\r\naxiosInstance.interceptors.request.use((req) => {\r\n  //assigning the new token after login again after logout\r\n  const { auth } = store.getState();\r\n  if (auth.token) {\r\n    req.headers.Authorization = `Bearer ${auth.token}`;\r\n  }\r\n  return req;\r\n});\r\n\r\n//if an error happen when receiving a respond handling it\r\naxiosInstance.interceptors.response.use(\r\n  (res) => {\r\n    return res;\r\n  },\r\n  (error) => {\r\n    console.log(error.response);\r\n    const status = error.response ? error.response.status : 500;\r\n\r\n    if (status && status === 500) {\r\n      //if error = 500 mean users token is expired. Then we have to logout the user\r\n      localStorage.clear();\r\n      store.dispatch({ type: authConstants.LOGOUT_SUCCESS });\r\n    }\r\n\r\n    return Promise.reject(error);\r\n  }\r\n);\r\n\r\nexport default axiosInstance;\r\n\r\n\r\n"],"mappings":"AAAA;AACA;AACA,OAAOA,KAAK,MAAM,OAAO;AACzB,SAASC,GAAG,QAAQ,cAAc;AAClC,OAAOC,KAAK,MAAM,UAAU;AAC5B,SAASC,aAAa,QAAQ,sBAAsB;AAEpD,IAAMC,KAAK,GAAGC,MAAM,CAACC,YAAY,CAACC,OAAO,CAAC,OAAO,CAAC;;AAElD;AACA,IAAMC,aAAa,GAAGR,KAAK,CAACS,MAAM,CAAC;EACjCC,OAAO,EAAET,GAAG;EACZU,OAAO,EAAE;IAAEC,aAAa,EAAER,KAAK,aAAAS,MAAA,CAAaT,KAAK,IAAK;EAAG;AAC3D,CAAC,CAAC;;AAEF;AACA;AACAI,aAAa,CAACM,YAAY,CAACC,OAAO,CAACC,GAAG,CAAC,UAACC,GAAG,EAAK;EAC9C;EAAA,IAAAC,eAAA,GACiBhB,KAAK,CAACiB,QAAQ,CAAC,CAAC;IAAzBC,IAAI,GAAAF,eAAA,CAAJE,IAAI;EACZ,IAAIA,IAAI,CAAChB,KAAK,EAAE;IACda,GAAG,CAACN,OAAO,CAACC,aAAa,aAAAC,MAAA,CAAaO,IAAI,CAAChB,KAAK,CAAE;EACpD;EACA,OAAOa,GAAG;AACZ,CAAC,CAAC;;AAEF;AACAT,aAAa,CAACM,YAAY,CAACO,QAAQ,CAACL,GAAG,CACrC,UAACM,GAAG,EAAK;EACP,OAAOA,GAAG;AACZ,CAAC,EACD,UAACC,KAAK,EAAK;EACTC,OAAO,CAACC,GAAG,CAACF,KAAK,CAACF,QAAQ,CAAC;EAC3B,IAAMK,MAAM,GAAGH,KAAK,CAACF,QAAQ,GAAGE,KAAK,CAACF,QAAQ,CAACK,MAAM,GAAG,GAAG;EAE3D,IAAIA,MAAM,IAAIA,MAAM,KAAK,GAAG,EAAE;IAC5B;IACApB,YAAY,CAACqB,KAAK,CAAC,CAAC;IACpBzB,KAAK,CAAC0B,QAAQ,CAAC;MAAEC,IAAI,EAAE1B,aAAa,CAAC2B;IAAe,CAAC,CAAC;EACxD;EAEA,OAAOC,OAAO,CAACC,MAAM,CAACT,KAAK,CAAC;AAC9B,CACF,CAAC;AAED,eAAef,aAAa"},"metadata":{},"sourceType":"module"}